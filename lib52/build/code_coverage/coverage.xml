<?xml version="1.0" encoding="UTF-8"?>
<snapshot methodcount="226" methodscovered="121" statementcount="1441" statementscovered="1276" totalcount="1667" totalcovered="1397">
  <package name="default" methodcount="226" methodscovered="121" statementcount="1441" statementscovered="1276" totalcount="1667" totalcovered="1397">
    <class name="Aleafs\Lib\Controller" methodcount="3" methodscovered="0" statementcount="0" statementscovered="0" totalcount="3" totalcovered="0">
      <sourcefile name="controller.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/controller.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | é»è®¤æ§å¶å¨		    					    							|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copygight (c) 2010 Aleafs.Com. All Rights Reserved						|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: zhangxc &lt;zhangxc83@sohu.com&gt;									|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: autoload.php 22 2010-04-15 16:28:45Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Exception;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Controller</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	/* {{{ public void __construct() */</sourceline>
        <sourceline coveredcount="0">	/**</sourceline>
        <sourceline coveredcount="0">	 * æé å½æ°</sourceline>
        <sourceline coveredcount="0">	 *</sourceline>
        <sourceline coveredcount="0">	 * @access public</sourceline>
        <sourceline coveredcount="0">	 * @return void</sourceline>
        <sourceline coveredcount="0">	 */</sourceline>
        <sourceline coveredcount="0">	public function __construct()</sourceline>
        <sourceline coveredcount="0">	{</sourceline>
        <sourceline coveredcount="0">	}</sourceline>
        <sourceline coveredcount="0">	/* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	/* {{{ public void execute() */</sourceline>
        <sourceline coveredcount="0">	/**</sourceline>
        <sourceline coveredcount="0">	 * æ§è¡è¯·æ±</sourceline>
        <sourceline coveredcount="0">	 *</sourceline>
        <sourceline coveredcount="0">	 * @access public</sourceline>
        <sourceline coveredcount="0">	 * @return void</sourceline>
        <sourceline coveredcount="0">	 */</sourceline>
        <sourceline coveredcount="0">	public function execute($action, $param, $post = null)</sourceline>
        <sourceline coveredcount="0">	{</sourceline>
        <sourceline coveredcount="0">		$action	= strtolower(trim($action));</sourceline>
        <sourceline coveredcount="0">		if (empty($action)) {</sourceline>
        <sourceline coveredcount="0">			$action	= 'index';</sourceline>
        <sourceline coveredcount="0">		}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		$method	= sprintf('action%s', ucfirst($action));</sourceline>
        <sourceline coveredcount="0">		if (!method_exists($this, $method)) {</sourceline>
        <sourceline coveredcount="0">			throw new Exception(sprintf('Undefined action named as "%s"', $action));</sourceline>
        <sourceline coveredcount="0">		}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">		return $this-&gt;$method($param, $post);</sourceline>
        <sourceline coveredcount="0">	}</sourceline>
        <sourceline coveredcount="0">	/* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	/* {{{ protected void actionIndex() */</sourceline>
        <sourceline coveredcount="0">	/**</sourceline>
        <sourceline coveredcount="0">	 * é»è®¤å¨ä½</sourceline>
        <sourceline coveredcount="0">	 *</sourceline>
        <sourceline coveredcount="0">	 * @access protected</sourceline>
        <sourceline coveredcount="0">	 * @return void</sourceline>
        <sourceline coveredcount="0">	 */</sourceline>
        <sourceline coveredcount="0">	protected function actionIndex($param, $post = null)</sourceline>
        <sourceline coveredcount="0">	{</sourceline>
        <sourceline coveredcount="0">		echo '&lt;!--STATUS OK--&gt;';</sourceline>
        <sourceline coveredcount="0">	}</sourceline>
        <sourceline coveredcount="0">	/* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Database" methodcount="29" methodscovered="19" statementcount="174" statementscovered="145" totalcount="203" totalcovered="164">
      <sourcefile name="database.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/database.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | DBæä½ç±»		    					    							|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2009 Baidu. Inc. All Rights Reserved						|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: zhangxc &lt;zhangxuancheng@baidu.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: db.php 19 2010-04-14 02:00:51Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">abstract class Database</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæå¸¸é */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    const EQ		= 1;</sourceline>
        <sourceline coveredcount="0">    const NE		= 2;</sourceline>
        <sourceline coveredcount="0">    const GT		= 3;</sourceline>
        <sourceline coveredcount="0">    const GE		= 4;</sourceline>
        <sourceline coveredcount="0">    const LT		= 5;</sourceline>
        <sourceline coveredcount="0">    const LE		= 6;</sourceline>
        <sourceline coveredcount="0">    const IN		= 7;</sourceline>
        <sourceline coveredcount="0">    const NOTIN		= 8;</sourceline>
        <sourceline coveredcount="0">    const LIKE		= 9;</sourceline>
        <sourceline coveredcount="0">    const NOTLIKE	= 10;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @ç­è·¯è¾¹ç</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    const CIRCUIT   = 3;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæåé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $eqs	= array(</sourceline>
        <sourceline coveredcount="0">        self::EQ		=&gt; '%s = %s',</sourceline>
        <sourceline coveredcount="0">        self::NE		=&gt; '%s != %s',</sourceline>
        <sourceline coveredcount="0">        self::GT		=&gt; '%s &gt; %s',</sourceline>
        <sourceline coveredcount="0">        self::GE		=&gt; '%s &gt;= %s',</sourceline>
        <sourceline coveredcount="0">        self::LT		=&gt; '%s &lt; %s',</sourceline>
        <sourceline coveredcount="0">        self::LE		=&gt; '%s &lt;= %s',</sourceline>
        <sourceline coveredcount="0">        self::IN		=&gt; '%s IN (%s)',</sourceline>
        <sourceline coveredcount="0">        self::NOTIN		=&gt; '%s NOT IN (%s)',</sourceline>
        <sourceline coveredcount="0">        self::LIKE		=&gt; "%s LIKE '%%%s%%'",</sourceline>
        <sourceline coveredcount="0">        self::NOTLIKE	=&gt; "%s NOT LIKE '%%%s%%'",</sourceline>
        <sourceline coveredcount="0">    );</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ æååé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @éç½®å±æ§</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected $ini;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @è¿æ¥ç­è·¯</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected $circuit  = 0;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @äºå¡</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected $transact	= 0;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @è¿æ¥å¥æ</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected $link		= null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @æ°æ®èµæº</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected $datares	= null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @å½åæä½è¡¨</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected $table	= null;</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @WHEREæ¡ä»¶</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected $where	= array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @ORDER</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected $order	= array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @LIMIT</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected $limit	= array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @GROUP</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected $group	= array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void __construct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __construct($ini)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="-1">        $this-&gt;ini	= $ini;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void __destruct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * ææå½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __destruct()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        if (!empty($this-&gt;datares)) {</sourceline>
        <sourceline coveredcount="3">            $this-&gt;_free() &amp;&amp; $this-&gt;datares = null;</sourceline>
        <sourceline coveredcount="3">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        if (!empty($this-&gt;link)) {</sourceline>
        <sourceline coveredcount="4">            $this-&gt;rollback();</sourceline>
        <sourceline coveredcount="4">            $this-&gt;_disconnect();</sourceline>
        <sourceline coveredcount="4">            $this-&gt;link = null;</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object clear() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ¸çSQLå±æ§</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function clear()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        $this-&gt;where	= array();</sourceline>
        <sourceline coveredcount="4">        $this-&gt;order	= array();</sourceline>
        <sourceline coveredcount="4">        $this-&gt;group	= array();</sourceline>
        <sourceline coveredcount="4">        $this-&gt;limit	= array();</sourceline>
        <sourceline coveredcount="4">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object table() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è®¾ç½®å½åæä½è¡¨</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $table : è¡¨å</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function table($table)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        $this-&gt;table	= (string)$table;</sourceline>
        <sourceline coveredcount="4">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object where() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è®¾ç½®è¿æ»¤æ¡ä»¶</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $name : å­æ®µå</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $value : å¼</sourceline>
        <sourceline coveredcount="0">     * @param  Integer $mode : è¿æ»¤æ¹å¼</sourceline>
        <sourceline coveredcount="0">     * @param  Boolean $comma : æ¯å¦å å¼å·</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function where($name, $value, $mode = self::EQ, $comma = true)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $this-&gt;where[] = array(</sourceline>
        <sourceline coveredcount="1">            trim($name), $value, $mode, (bool)$comma</sourceline>
        <sourceline coveredcount="1">        );</sourceline>
        <sourceline coveredcount="1">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object order() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è®¾ç½®æåºæ¹å¼</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $name : åå</sourceline>
        <sourceline coveredcount="0">     * @param  String $mode : ASC / DESC</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function order($name, $mode = 'ASC')</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        $this-&gt;order[trim($name)] = strtoupper(trim($mode));</sourceline>
        <sourceline coveredcount="2">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object group() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è®¾ç½®ç±»èæ¹å¼</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $column</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function group($column)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $this-&gt;group[trim($column)] = true;</sourceline>
        <sourceline coveredcount="1">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object limit() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è®¾ç½®æ¡æ°éå¶æ¡ä»¶</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  Integer $count : ç»ææ°</sourceline>
        <sourceline coveredcount="0">     * @param  Integer $offset : åç§»é</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function limit($count, $offset = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="-1">        $this-&gt;limit = array(max(0, (int)$count));</sourceline>
        <sourceline coveredcount="-1">        if (null !== $offset) {</sourceline>
        <sourceline coveredcount="-1">            $this-&gt;limit[] = max(0, (int)$offset);</sourceline>
        <sourceline coveredcount="-1">        }</sourceline>
        <sourceline coveredcount="-1">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object select() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ§è¡æ£ç´¢</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function select()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        $column	= func_get_args();</sourceline>
        <sourceline coveredcount="4">        if (!isset($column[1])) {</sourceline>
        <sourceline coveredcount="3">            $column	= (array)$column[0];</sourceline>
        <sourceline coveredcount="3">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        $this-&gt;datares	= $this-&gt;query(sprintf(</sourceline>
        <sourceline coveredcount="4">            'SELECT %s FROM %s %s %s %s %s',</sourceline>
        <sourceline coveredcount="4">            implode(',', $column),</sourceline>
        <sourceline coveredcount="4">            $this-&gt;table,</sourceline>
        <sourceline coveredcount="4">            $this-&gt;_build_where(),</sourceline>
        <sourceline coveredcount="4">            $this-&gt;_build_group(),</sourceline>
        <sourceline coveredcount="4">            $this-&gt;_build_order(),</sourceline>
        <sourceline coveredcount="4">            $this-&gt;_build_limit()</sourceline>
        <sourceline coveredcount="4">        ));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object update() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ§è¡æ´æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $value : é®å¼æ°ç»</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $comma : æ¯å¦å å¼å·</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function update($value, $comma = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $values = '';</sourceline>
        <sourceline coveredcount="1">        $comma  = (array)$comma;</sourceline>
        <sourceline coveredcount="1">        foreach ((array)$value AS $key =&gt; $val) {</sourceline>
        <sourceline coveredcount="1">            $key = trim($key);</sourceline>
        <sourceline coveredcount="1">            if (empty($key)) {</sourceline>
        <sourceline coveredcount="-1">                continue;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="1">            $values .= sprintf(</sourceline>
        <sourceline coveredcount="1">                ',%s=%s', $key,</sourceline>
        <sourceline coveredcount="1">                $this-&gt;escape($val, !isset($comma[$key]) || false !== $comma[$key])</sourceline>
        <sourceline coveredcount="1">            );</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        if (empty($values)) {</sourceline>
        <sourceline coveredcount="-1">            $this-&gt;_free();</sourceline>
        <sourceline coveredcount="-1">            return $this;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $this-&gt;datares  = $this-&gt;query(sprintf(</sourceline>
        <sourceline coveredcount="1">            'UPDATE %s SET %s %s %s %s',</sourceline>
        <sourceline coveredcount="1">            $this-&gt;table,</sourceline>
        <sourceline coveredcount="1">            substr($values, 1),</sourceline>
        <sourceline coveredcount="1">            $this-&gt;_build_where(),</sourceline>
        <sourceline coveredcount="1">            $this-&gt;_build_order(),</sourceline>
        <sourceline coveredcount="1">            $this-&gt;_build_limit()</sourceline>
        <sourceline coveredcount="1">        ));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object insert() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ§è¡æå¥</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $value</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function insert($value)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $this-&gt;datares	= $this-&gt;query(sprintf(</sourceline>
        <sourceline coveredcount="3">            'INSERT INTO %s (%s) VALUES (%s)',</sourceline>
        <sourceline coveredcount="3">            $this-&gt;table,</sourceline>
        <sourceline coveredcount="3">            implode(',', array_keys($value)),</sourceline>
        <sourceline coveredcount="3">            $this-&gt;escape($value, true)</sourceline>
        <sourceline coveredcount="3">        ));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object delete() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ§è¡å é¤</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function delete()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        $this-&gt;datares	= $this-&gt;query(sprintf(</sourceline>
        <sourceline coveredcount="2">            'DELETE FROM %s %s %s %s',</sourceline>
        <sourceline coveredcount="2">            $this-&gt;table,</sourceline>
        <sourceline coveredcount="2">            $this-&gt;_build_where(),</sourceline>
        <sourceline coveredcount="2">            $this-&gt;_build_order(),</sourceline>
        <sourceline coveredcount="2">            $this-&gt;_build_limit()</sourceline>
        <sourceline coveredcount="2">        ));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture getAll() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åæ¥è¯¢ç»æé</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function getAll()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="-1">        if (empty($this-&gt;datares)) {</sourceline>
        <sourceline coveredcount="-1">            return null;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">        $arrRet	= array();</sourceline>
        <sourceline coveredcount="-1">        while ($row = $this-&gt;_fetch($this-&gt;datares)) {</sourceline>
        <sourceline coveredcount="-1">            $arrRet	= $row;</sourceline>
        <sourceline coveredcount="-1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">        return $arrRet;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture getOne() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åç¬¬ä¸ä¸ªååæ ¼çæ°æ®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function getOne()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        if (empty($this-&gt;datares)) {</sourceline>
        <sourceline coveredcount="-1">            return null;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">        return reset($this-&gt;_fetch($this-&gt;datares));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture error() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åæåä¸æ¬¡éè¯¯ä¿¡æ¯</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function error()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        return $this-&gt;_error();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture query() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ§è¡ä¸æ¡SQL</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $sql</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function query($sql, $try = true)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        if (empty($this-&gt;link)) {</sourceline>
        <sourceline coveredcount="4">            if ($this-&gt;circuit &gt;= self::CIRCUIT) {</sourceline>
        <sourceline coveredcount="-1">                return false;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">            $error = true;</sourceline>
        <sourceline coveredcount="4">            for ($i = 0; $i &lt; 3; $i++) {</sourceline>
        <sourceline coveredcount="4">                if (false !== $this-&gt;_connect()) {</sourceline>
        <sourceline coveredcount="4">                    $error = false;</sourceline>
        <sourceline coveredcount="4">                    break;</sourceline>
        <sourceline coveredcount="-2">                }</sourceline>
        <sourceline coveredcount="-1">                usleep(($i + 1) * 10000);</sourceline>
        <sourceline coveredcount="-1">            }</sourceline>
        <sourceline coveredcount="4">            $this-&gt;circuit++;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">            if ($error) {</sourceline>
        <sourceline coveredcount="-1">                return false;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        return $this-&gt;_query(self::sqlClean($sql), $try);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object begin() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å¼å¯äºå¡</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function begin()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        if (!$this-&gt;transact) {</sourceline>
        <sourceline coveredcount="1">            $this-&gt;_begin();</sourceline>
        <sourceline coveredcount="1">            $this-&gt;transact++;</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object commit() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æäº¤äºå¡</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function commit()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        if ($this-&gt;transact) {</sourceline>
        <sourceline coveredcount="1">            $this-&gt;_commit();</sourceline>
        <sourceline coveredcount="1">            $this-&gt;transact	= 0;</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object rollback() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åæ»äºå¡</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function rollback()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        if ($this-&gt;transact) {</sourceline>
        <sourceline coveredcount="1">            $this-&gt;_rollback();</sourceline>
        <sourceline coveredcount="1">            $this-&gt;transact	= 0;</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Integer lastId() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¿åä¸ä¸æ¬¡å­å¢åæå¥çå¼</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Integer</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function lastId()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        return empty($this-&gt;link) ? 0 : (int)$this-&gt;_lastId();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Integer numRows() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¿åæ¥è¯¢è·å¾ç»ææ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Integer</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function numRows()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="-1">        return empty($this-&gt;datares) ? 0 : (int)$this-&gt;_numRows();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Integer affectedRows() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¿åæ´æ°åå½±åçè¡æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Integer</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function affectedRows()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        return empty($this-&gt;link) ? 0 : (int)$this-&gt;_affectedRows();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected String _build_where() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé whereå­å¥</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access protected</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected function _build_where()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        $strRet	= '';</sourceline>
        <sourceline coveredcount="4">        foreach ($this-&gt;where AS $where) {</sourceline>
        <sourceline coveredcount="1">            list($col, $val, $eqs, $com) = $where;</sourceline>
        <sourceline coveredcount="1">            if (empty($col) || !isset(self::$eqs[$eqs])) {</sourceline>
        <sourceline coveredcount="-1">                continue;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">            $com = ($eqs == self::LIKE || $eqs == self::NOTLIKE) ? false : $com;</sourceline>
        <sourceline coveredcount="1">            $strRet .= sprintf(' AND ' . self::$eqs[$eqs], $col, $this-&gt;escape($val, $com));</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        return $strRet ? sprintf('WHERE %s', substr($strRet, 5)) : '';</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected String _build_order() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé orderå­å¥</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access protected</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected function _build_order()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        $strRet	= '';</sourceline>
        <sourceline coveredcount="4">        foreach ($this-&gt;order AS $name =&gt; $type) {</sourceline>
        <sourceline coveredcount="2">            if (empty($name)) {</sourceline>
        <sourceline coveredcount="-1">                continue;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="2">            $strRet	.= sprintf(' %s %s', $name, $type == 'DESC' ? 'DESC' : 'ASC');</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        return empty($strRet) ? '' : 'ORDER BY ' . $strRet;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected String _build_group() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé groupå­å¥</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access protected</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected function _build_group()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        if (empty($this-&gt;group)) {</sourceline>
        <sourceline coveredcount="3">            return '';</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return sprintf('GROUP BY %s', implode(',', array_keys($this-&gt;group)));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected String _build_limit() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé limitå­å¥</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access protected</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected function _build_limit()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        if (empty($this-&gt;limit)) {</sourceline>
        <sourceline coveredcount="4">            return '';</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">        $strRet	= reset($this-&gt;limit);	/* count  */</sourceline>
        <sourceline coveredcount="-1">        if (count($this-&gt;limit) &gt; 1) {	/* offset */</sourceline>
        <sourceline coveredcount="-1">            $strRet = sprintf('%d, %d', next($this-&gt;limit), $strRet);</sourceline>
        <sourceline coveredcount="-1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">        return sprintf('LIMIT %s', $strRet);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected static String sqlClean() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * SQLè¯­å¥æ¸æ´</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access protected static</sourceline>
        <sourceline coveredcount="0">     * @param  String $sql</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected static function sqlClean($sql)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        return trim(preg_replace('/\s{2,}/', ' ', $sql));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private String escape() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å®å¨è¿æ»¤å¹¶æå</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access protected static</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $value</sourceline>
        <sourceline coveredcount="0">     * @param  Boolean $comma (default true)</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function escape($value, $comma = true)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        if (is_array($value)) {</sourceline>
        <sourceline coveredcount="3">            $value	= array_unique(array_map(array(&amp;$this, '_escape'), $value));</sourceline>
        <sourceline coveredcount="3">            if ($comma) {</sourceline>
        <sourceline coveredcount="3">                return sprintf("'%s'", implode("','", $value));</sourceline>
        <sourceline coveredcount="-2">            } else {</sourceline>
        <sourceline coveredcount="1">                return implode(',', $value);</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return sprintf($comma ? "'%s'" : '%s', $this-&gt;_escape($value));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private String _escape() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å®å¨è¿æ»¤å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String $string</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function _escape($string)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        return addslashes($string);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    abstract protected function _connect();</sourceline>
        <sourceline coveredcount="0">    abstract protected function _disconnect();</sourceline>
        <sourceline coveredcount="0">    abstract protected function _query($sql);</sourceline>
        <sourceline coveredcount="0">    abstract protected function _free();</sourceline>
        <sourceline coveredcount="0">    abstract protected function _begin();</sourceline>
        <sourceline coveredcount="0">    abstract protected function _commit();</sourceline>
        <sourceline coveredcount="0">    abstract protected function _rollback();</sourceline>
        <sourceline coveredcount="0">    abstract protected function _fetch($res);</sourceline>
        <sourceline coveredcount="0">    abstract protected function _error();</sourceline>
        <sourceline coveredcount="0">    abstract protected function _lastId();</sourceline>
        <sourceline coveredcount="0">    abstract protected function _numRows();</sourceline>
        <sourceline coveredcount="0">    abstract protected function _affectedRows();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Session" methodcount="10" methodscovered="0" statementcount="0" statementscovered="0" totalcount="10" totalcovered="0">
      <sourcefile name="session.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/session.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Sessionæä½ç±»														|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Taobao.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: pengchun &lt;pengchun@taobao.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: session.php 2010-04-19 13:54:32 pengchun Exp $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Session</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæå¸¸é */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @æ è®°sessionè¿ææ¶é´çå¸¸é</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    const TS    = '__ts__';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæåé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @æ¯å¦å·²ç»åå§å</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $init = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @ç¨äºææçå¯¹è±¡</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $kill = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @ç¸å³å±æ§</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $prop = array(</sourceline>
        <sourceline coveredcount="0">        'session.name'      =&gt; 'PHPSESSID',</sourceline>
        <sourceline coveredcount="0">        'session.expire'    =&gt; 1800,</sourceline>
        <sourceline coveredcount="0">        'touch.delay'       =&gt; 180,       /**&lt;  æ¯é180så¼ºå¶å·æ°TS      */</sourceline>
        <sourceline coveredcount="0">        'touch.ratio'       =&gt; 10,        /**&lt;  180så10%çæ¦çå·æ°TS      */</sourceline>
        <sourceline coveredcount="0">        'cookie.domain'     =&gt; null,</sourceline>
        <sourceline coveredcount="0">        'cookie.path'       =&gt; '/',</sourceline>
        <sourceline coveredcount="0">        'cookie.expire'     =&gt; 0,</sourceline>
        <sourceline coveredcount="0">    );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @Sessionæ°ç»</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $data = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @Sessionç­¾å</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $sign = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @Cookieåå­</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $name = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @Session ID</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $ssid = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @CACHE</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $cache;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void init() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å¼å§session</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $ini (default null)</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function init($ini = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        foreach ((array)$ini AS $key =&gt; $val) {</sourceline>
        <sourceline coveredcount="0">            if (!isset(self::$prop[$key])) {</sourceline>
        <sourceline coveredcount="0">                continue;</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="0">            self::$prop[$key] = $val;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        // TODO: åå§åcache</sourceline>
        <sourceline coveredcount="0">        self::$cache = new Cache\File('session');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        self::$name = self::$prop['session.name'];</sourceline>
        <sourceline coveredcount="0">        self::$ssid = trim(Cookie::get(self::$name));</sourceline>
        <sourceline coveredcount="0">        if (empty(self::$ssid) || !self::cookieExpire($ssid)) {</sourceline>
        <sourceline coveredcount="0">            self::$data = array();</sourceline>
        <sourceline coveredcount="0">            self::$ssid = self::sessid();</sourceline>
        <sourceline coveredcount="0">            Cookie::set(</sourceline>
        <sourceline coveredcount="0">                self::$name, self::$ssid,</sourceline>
        <sourceline coveredcount="0">                self::$prop['cookie.domain'],</sourceline>
        <sourceline coveredcount="0">                self::$prop['cookie.path'],</sourceline>
        <sourceline coveredcount="0">                self::$prop['cookie.expire'] &gt; 0 ? time() + self::$prop['cookie.expire'] : 0</sourceline>
        <sourceline coveredcount="0">            );</sourceline>
        <sourceline coveredcount="0">        } else {</sourceline>
        <sourceline coveredcount="0">            $json = self::$cache-&gt;get(self::$ssid);</sourceline>
        <sourceline coveredcount="0">            self::$data = json_decode($json, true);</sourceline>
        <sourceline coveredcount="0">            if (self::sessionExpire()) {</sourceline>
        <sourceline coveredcount="0">                self::$data = array();</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        self::$sign = crc32(json_encode(self::$data));</sourceline>
        <sourceline coveredcount="0">        self::$kill = new SessionKiller();</sourceline>
        <sourceline coveredcount="0">        self::$init = true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void set() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå¥session</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $val</sourceline>
        <sourceline coveredcount="0">     * @param  Boolean $flush (default false)</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function set($key, $val, $flush = false)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        self::checkInit();</sourceline>
        <sourceline coveredcount="0">        self::$data[trim($key)] = $val;</sourceline>
        <sourceline coveredcount="0">        if ($flush) {</sourceline>
        <sourceline coveredcount="0">            self::flush();</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void destroy() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ¸ç©ºsession</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function destroy()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        self::checkInit();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        self::$data = array();</sourceline>
        <sourceline coveredcount="0">        self::$cache-&gt;delete(self::$ssid);</sourceline>
        <sourceline coveredcount="0">        Cookie::set(</sourceline>
        <sourceline coveredcount="0">            self::$name, '',</sourceline>
        <sourceline coveredcount="0">            self::$prop['cookie.domain'],</sourceline>
        <sourceline coveredcount="0">            self::$prop['cookie.path'],</sourceline>
        <sourceline coveredcount="0">            time() - 86400</sourceline>
        <sourceline coveredcount="0">        );</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void close() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å³é­session</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function close()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        self::checkInit();</sourceline>
        <sourceline coveredcount="0">        return self::flush();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static Mixture get() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¯»session</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function get($key)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        self::checkInit();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        $key = trim($key);</sourceline>
        <sourceline coveredcount="0">        if (!isset(self::$data[$key])) {</sourceline>
        <sourceline coveredcount="0">            return null;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        return self::$data[$key];</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static Boolean flush() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå¥session</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function flush()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        $time = time();</sourceline>
        <sourceline coveredcount="0">        if (empty(self::$prop[self::TS]) ||</sourceline>
        <sourceline coveredcount="0">            $time - self::$data[self::TS] &gt;= self::$prop['touch.delay'] ||</sourceline>
        <sourceline coveredcount="0">            rand(1, 100) &lt;= self::$prop['touch.ratio'])</sourceline>
        <sourceline coveredcount="0">        {</sourceline>
        <sourceline coveredcount="0">            self::$data[self::TS] = $time + self::$prop['session.expire'];</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        $sign = crc32(json_encode(self::$data));</sourceline>
        <sourceline coveredcount="0">        if (self::$sign == $sign) {</sourceline>
        <sourceline coveredcount="0">            return true;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        self::$cache-&gt;set(self::$ssid, self::$data, self::$prop['session.expire']);</sourceline>
        <sourceline coveredcount="0">        self::$sign = $sign;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        return true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static Boolean checkInit() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå§åSession</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function checkInit()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        return (!self::$init) &amp;&amp; self::init();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String sessid() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * çæä¸ä¸ªæ°çsessid</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function sessid()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static Boolean sessionExpire() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ£æ¥SESSIONæ¯å¦è¿æ</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function sessionExpire()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        return time() &gt;= self::$data[self::TS] ? true : false;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static Boolean cookieExpire() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ£æ¥sessIDçcookieæ¯å¦è¿æ</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String  $sid</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function cookieExpire($sid)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        return false;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/* {{{ class SessionKiller() */</sourceline>
        <sourceline coveredcount="0">class SessionKiller</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0">    public function __destruct()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        Session::close();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">/* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\SessionKiller" methodcount="1" methodscovered="0" statementcount="0" statementscovered="0" totalcount="1" totalcovered="0">
      <sourcefile name="session.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/session.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Sessionæä½ç±»														|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Taobao.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: pengchun &lt;pengchun@taobao.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: session.php 2010-04-19 13:54:32 pengchun Exp $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">class Session</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæå¸¸é */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @æ è®°sessionè¿ææ¶é´çå¸¸é</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    const TS    = '__ts__';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæåé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @æ¯å¦å·²ç»åå§å</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $init = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @ç¨äºææçå¯¹è±¡</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $kill = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @ç¸å³å±æ§</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $prop = array(</sourceline>
        <sourceline coveredcount="0">        'session.name'      =&gt; 'PHPSESSID',</sourceline>
        <sourceline coveredcount="0">        'session.expire'    =&gt; 1800,</sourceline>
        <sourceline coveredcount="0">        'touch.delay'       =&gt; 180,       /**&lt;  æ¯é180så¼ºå¶å·æ°TS      */</sourceline>
        <sourceline coveredcount="0">        'touch.ratio'       =&gt; 10,        /**&lt;  180så10%çæ¦çå·æ°TS      */</sourceline>
        <sourceline coveredcount="0">        'cookie.domain'     =&gt; null,</sourceline>
        <sourceline coveredcount="0">        'cookie.path'       =&gt; '/',</sourceline>
        <sourceline coveredcount="0">        'cookie.expire'     =&gt; 0,</sourceline>
        <sourceline coveredcount="0">    );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @Sessionæ°ç»</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $data = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @Sessionç­¾å</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $sign = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @Cookieåå­</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $name = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @Session ID</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $ssid = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @CACHE</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $cache;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void init() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å¼å§session</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $ini (default null)</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function init($ini = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        foreach ((array)$ini AS $key =&gt; $val) {</sourceline>
        <sourceline coveredcount="0">            if (!isset(self::$prop[$key])) {</sourceline>
        <sourceline coveredcount="0">                continue;</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="0">            self::$prop[$key] = $val;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        // TODO: åå§åcache</sourceline>
        <sourceline coveredcount="0">        self::$cache = new Cache\File('session');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        self::$name = self::$prop['session.name'];</sourceline>
        <sourceline coveredcount="0">        self::$ssid = trim(Cookie::get(self::$name));</sourceline>
        <sourceline coveredcount="0">        if (empty(self::$ssid) || !self::cookieExpire($ssid)) {</sourceline>
        <sourceline coveredcount="0">            self::$data = array();</sourceline>
        <sourceline coveredcount="0">            self::$ssid = self::sessid();</sourceline>
        <sourceline coveredcount="0">            Cookie::set(</sourceline>
        <sourceline coveredcount="0">                self::$name, self::$ssid,</sourceline>
        <sourceline coveredcount="0">                self::$prop['cookie.domain'],</sourceline>
        <sourceline coveredcount="0">                self::$prop['cookie.path'],</sourceline>
        <sourceline coveredcount="0">                self::$prop['cookie.expire'] &gt; 0 ? time() + self::$prop['cookie.expire'] : 0</sourceline>
        <sourceline coveredcount="0">            );</sourceline>
        <sourceline coveredcount="0">        } else {</sourceline>
        <sourceline coveredcount="0">            $json = self::$cache-&gt;get(self::$ssid);</sourceline>
        <sourceline coveredcount="0">            self::$data = json_decode($json, true);</sourceline>
        <sourceline coveredcount="0">            if (self::sessionExpire()) {</sourceline>
        <sourceline coveredcount="0">                self::$data = array();</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        self::$sign = crc32(json_encode(self::$data));</sourceline>
        <sourceline coveredcount="0">        self::$kill = new SessionKiller();</sourceline>
        <sourceline coveredcount="0">        self::$init = true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void set() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå¥session</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $val</sourceline>
        <sourceline coveredcount="0">     * @param  Boolean $flush (default false)</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function set($key, $val, $flush = false)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        self::checkInit();</sourceline>
        <sourceline coveredcount="0">        self::$data[trim($key)] = $val;</sourceline>
        <sourceline coveredcount="0">        if ($flush) {</sourceline>
        <sourceline coveredcount="0">            self::flush();</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void destroy() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ¸ç©ºsession</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function destroy()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        self::checkInit();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        self::$data = array();</sourceline>
        <sourceline coveredcount="0">        self::$cache-&gt;delete(self::$ssid);</sourceline>
        <sourceline coveredcount="0">        Cookie::set(</sourceline>
        <sourceline coveredcount="0">            self::$name, '',</sourceline>
        <sourceline coveredcount="0">            self::$prop['cookie.domain'],</sourceline>
        <sourceline coveredcount="0">            self::$prop['cookie.path'],</sourceline>
        <sourceline coveredcount="0">            time() - 86400</sourceline>
        <sourceline coveredcount="0">        );</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void close() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å³é­session</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function close()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        self::checkInit();</sourceline>
        <sourceline coveredcount="0">        return self::flush();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static Mixture get() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¯»session</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function get($key)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        self::checkInit();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        $key = trim($key);</sourceline>
        <sourceline coveredcount="0">        if (!isset(self::$data[$key])) {</sourceline>
        <sourceline coveredcount="0">            return null;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        return self::$data[$key];</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static Boolean flush() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå¥session</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function flush()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        $time = time();</sourceline>
        <sourceline coveredcount="0">        if (empty(self::$prop[self::TS]) ||</sourceline>
        <sourceline coveredcount="0">            $time - self::$data[self::TS] &gt;= self::$prop['touch.delay'] ||</sourceline>
        <sourceline coveredcount="0">            rand(1, 100) &lt;= self::$prop['touch.ratio'])</sourceline>
        <sourceline coveredcount="0">        {</sourceline>
        <sourceline coveredcount="0">            self::$data[self::TS] = $time + self::$prop['session.expire'];</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        $sign = crc32(json_encode(self::$data));</sourceline>
        <sourceline coveredcount="0">        if (self::$sign == $sign) {</sourceline>
        <sourceline coveredcount="0">            return true;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        self::$cache-&gt;set(self::$ssid, self::$data, self::$prop['session.expire']);</sourceline>
        <sourceline coveredcount="0">        self::$sign = $sign;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        return true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static Boolean checkInit() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå§åSession</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function checkInit()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        return (!self::$init) &amp;&amp; self::init();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String sessid() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * çæä¸ä¸ªæ°çsessid</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function sessid()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static Boolean sessionExpire() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ£æ¥SESSIONæ¯å¦è¿æ</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function sessionExpire()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        return time() &gt;= self::$data[self::TS] ? true : false;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static Boolean cookieExpire() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ£æ¥sessIDçcookieæ¯å¦è¿æ</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String  $sid</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function cookieExpire($sid)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        return false;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">/* {{{ class SessionKiller() */</sourceline>
        <sourceline coveredcount="0" startclass="1">class SessionKiller</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0">    public function __destruct()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        Session::close();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0">/* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Language" methodcount="9" methodscovered="6" statementcount="98" statementscovered="94" totalcount="107" totalcovered="100">
      <sourcefile name="language.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/language.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Language.php è¯­è¨ç¿»è¯å											|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Aleafs.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: aleafs &lt;zhangxc83@sohu.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: language.php 94 2010-06-02 13:43:29Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Cache\Apc;</sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Stream\Mo;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Language</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæå¸¸é */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    const CACHE_PREFIX  = '#LANG#';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    const CACHE_EXPIRE  = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæåé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @domain =&gt; path</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $rules   = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @moè¯»åå¨</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $reader  = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @è°è¯ç¶æ</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $status  = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @è¯­è¨</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $lang    = 'zh_cn';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @ç¼å­å¯¹è±¡</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $cache   = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @åæ³¨åçä¼åçº§é«</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $sorted  = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void init() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå§ålangå±æ§</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String  $lang</sourceline>
        <sourceline coveredcount="0">     * @param  Boolean $cache : default true</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function init($lang, $cache = true)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $lang = strtolower(trim($lang));</sourceline>
        <sourceline coveredcount="3">        if ($lang != self::$lang) {</sourceline>
        <sourceline coveredcount="1">            self::$lang  = $lang;</sourceline>
        <sourceline coveredcount="1">            self::$cache = null;</sourceline>
        <sourceline coveredcount="1">            self::$reader= array();</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        if ($cache &amp;&amp; empty(self::$cache) &amp;&amp; function_exists('apc_add')) {</sourceline>
        <sourceline coveredcount="3">            self::$cache = new Apc(self::CACHE_PREFIX . $lang);</sourceline>
        <sourceline coveredcount="3">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void register() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ³¨åè¯­è¨å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $domain</sourceline>
        <sourceline coveredcount="0">     * @param  String $mofile</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function register($domain, $mofile)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        self::$rules[self::normailize($domain)] = realpath($mofile);</sourceline>
        <sourceline coveredcount="3">        self::$sorted = false;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void unregister() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ³¨éè¯­è¨å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $domain</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function unregister($domain)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $domain = self::normailize($domain);</sourceline>
        <sourceline coveredcount="1">        if (isset(self::$reader[$domain])) {</sourceline>
        <sourceline coveredcount="1">            unset(self::$reader[$domain]);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="1">        if (isset(self::$rules[$domain])) {</sourceline>
        <sourceline coveredcount="1">            unset(self::$rules[$domain]);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void cleanAllRules() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ¸çææå·²ç»æ³¨åçè¯­è¨å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function cleanAllRules()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        self::$reader   = array();</sourceline>
        <sourceline coveredcount="3">        self::$rules    = array();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static String translate() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åå­ç¬¦ä¸²çç¿»è¯</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $string</sourceline>
        <sourceline coveredcount="0">     * @param  String $domain : default null</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function translate($string, $domain = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        if (!empty(self::$cache)) {</sourceline>
        <sourceline coveredcount="3">            return self::$cache-&gt;shell(</sourceline>
        <sourceline coveredcount="3">                function() use ($string, $domain) {</sourceline>
        <sourceline coveredcount="3">                    return Language::_gettext($string, $domain);</sourceline>
        <sourceline coveredcount="3">                },</sourceline>
        <sourceline coveredcount="3">                json_encode(array('d' =&gt; $domain, 's' =&gt; $string)),</sourceline>
        <sourceline coveredcount="0">                self::CACHE_EXPIRE</sourceline>
        <sourceline coveredcount="3">            );</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return self::_gettext($string, $domain);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static String _gettext() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * ä»moæä»¶è·åå­ç¬¦ä¸²çç¿»è¯</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $string</sourceline>
        <sourceline coveredcount="0">     * @param  String $domain : default null</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function _gettext($string, $domain)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        if (null !== $domain) {</sourceline>
        <sourceline coveredcount="1">            $domain = self::normailize($domain);</sourceline>
        <sourceline coveredcount="1">            if (!isset(self::$rules[$domain])) {</sourceline>
        <sourceline coveredcount="-1">                return $string;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">            $rules  = array($domain =&gt; self::$rules[$domain]);</sourceline>
        <sourceline coveredcount="1">        } else {</sourceline>
        <sourceline coveredcount="3">            if (!self::$sorted) {</sourceline>
        <sourceline coveredcount="3">                self::$rules  = array_reverse(self::$rules, true);</sourceline>
        <sourceline coveredcount="3">                self::$sorted = true;</sourceline>
        <sourceline coveredcount="3">            }</sourceline>
        <sourceline coveredcount="3">            $rules  = self::$rules;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        foreach ((array)$rules AS $key =&gt; $path) {</sourceline>
        <sourceline coveredcount="3">            if (empty(self::$reader[$key])) {</sourceline>
        <sourceline coveredcount="3">                $file = self::mofile($key, $path);</sourceline>
        <sourceline coveredcount="3">                if (empty($file)) {</sourceline>
        <sourceline coveredcount="1">                    continue;</sourceline>
        <sourceline coveredcount="-2">                }</sourceline>
        <sourceline coveredcount="3">                self::$reader[$key] = new Mo($file);</sourceline>
        <sourceline coveredcount="3">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">            if (isset(self::$status[$key])) {</sourceline>
        <sourceline coveredcount="2">                self::$status[$key]['read']++;</sourceline>
        <sourceline coveredcount="2">            } else {</sourceline>
        <sourceline coveredcount="2">                self::$status[$key] = array(</sourceline>
        <sourceline coveredcount="2">                    'read'  =&gt; 1,</sourceline>
        <sourceline coveredcount="0">                );</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">            if (false !== ($result = self::$reader[$key]-&gt;gettext($string))) {</sourceline>
        <sourceline coveredcount="3">                return $result;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">        return $string;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static Mixture debug() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åè°è¯ä¿¡æ¯</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $domain : default null</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function debug($domain = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        if (null !== $domain) {</sourceline>
        <sourceline coveredcount="1">            $domain = self::normailize($domain);</sourceline>
        <sourceline coveredcount="1">            if (empty(self::$reader[$domain])) {</sourceline>
        <sourceline coveredcount="-1">                return null;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">            return self::$reader[$domain]-&gt;debugInfo();</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $debug = array();</sourceline>
        <sourceline coveredcount="1">        reset(self::$reader);</sourceline>
        <sourceline coveredcount="1">        foreach (self::$reader AS $domain =&gt; $reader) {</sourceline>
        <sourceline coveredcount="1">            $debug[$domain] = $reader-&gt;debugInfo();</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $debug;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String normailize() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å¯¹domainè¿è¡å½ä¸å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String $domain</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function normailize($domain)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        return empty($domain) ? '' : strtolower(trim($domain));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String mofile() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ ¹æ®domainåpathè·åæ­£ç¡®çmofileè·¯å¾</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String $domain</sourceline>
        <sourceline coveredcount="0">     * @param  String $path</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function mofile($domain, $path)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        if (empty($path)) {</sourceline>
        <sourceline coveredcount="-1">            return null;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        if (is_file($path)) {</sourceline>
        <sourceline coveredcount="1">            return $path;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        if (false === ($list = glob($path . '/*.mo'))) {</sourceline>
        <sourceline coveredcount="-1">            return null;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $mofile = array();</sourceline>
        <sourceline coveredcount="3">        foreach ($list AS $file) {</sourceline>
        <sourceline coveredcount="3">            $base = strtolower(basename($file, '.mo'));</sourceline>
        <sourceline coveredcount="3">            if (0 === strcmp($base, sprintf('%s.%s', $domain, self::$lang))) {</sourceline>
        <sourceline coveredcount="1">                return $file;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">            $mofile[$base] = $file;</sourceline>
        <sourceline coveredcount="3">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        if (isset($mofile[$domain])) {</sourceline>
        <sourceline coveredcount="1">            return $mofile[$domain];</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        if (empty($domain) &amp;&amp; isset($mofile[self::$lang])) {</sourceline>
        <sourceline coveredcount="3">            return $mofile[self::$lang];</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return null;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\LiveBox" methodcount="12" methodscovered="8" statementcount="111" statementscovered="107" totalcount="123" totalcovered="115">
      <sourcefile name="livebox.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/livebox.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | livebox.php	        											|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Aleafs.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: aleafs &lt;zhangxc83@sohu.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: connpool.php 2010-04-23  aleafs Exp $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class LiveBox</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ æååé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $host   = array();          /**&lt;  æå¡å¨åè¡¨      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $pool   = array();          /**&lt;  å¸¦æéçéæ©æ±   */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $offs   = array();          /**&lt;  ä¸å¯ç¨åè¡¨      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $maxInt = 0;                /**&lt;  éå³æ¥æ¾æ¶æå¤§éæºæ° */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $sign   = null;       /**&lt;  ä¸å¯ç¨åè¡¨ç­¾å      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $last   = null;       /**&lt;  ä¸æ¬¡è¿åçæå¡å¨      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $live   = 300;        /**&lt;  èªå¨å­æ´»æ£æ¥æ¶é´      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $cache  = null;       /**&lt;  ç¼å­æå¡      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object __construct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String  $token : ç¼å­åç¼</sourceline>
        <sourceline coveredcount="0">     * @param  Integer $live  : default 300</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __construct($token, $live = 300)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        $this-&gt;live  = max(0, (int)$live);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        if (function_exists('apc_add')) {</sourceline>
        <sourceline coveredcount="4">            $this-&gt;cache = new Cache\Apc($token);</sourceline>
        <sourceline coveredcount="4">        } else {</sourceline>
        <sourceline coveredcount="-1">            $this-&gt;cache = null;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        if (!empty($this-&gt;cache)) {</sourceline>
        <sourceline coveredcount="4">            $this-&gt;offs = self::filterOffs($this-&gt;cache-&gt;get('offs'));</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="4">        $this-&gt;sign = crc32(json_encode($this-&gt;offs));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Boolean __destruct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * ææå½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __destruct()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        if (!empty($this-&gt;cache)) {</sourceline>
        <sourceline coveredcount="4">            $offs = self::filterOffs(array_merge(</sourceline>
        <sourceline coveredcount="4">                (array)$this-&gt;cache-&gt;get('offs'),</sourceline>
        <sourceline coveredcount="4">                (array)$this-&gt;offs</sourceline>
        <sourceline coveredcount="4">            ));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">            if (crc32(json_encode($offs)) != $this-&gt;sign) {</sourceline>
        <sourceline coveredcount="1">                $this-&gt;cache-&gt;set('offs', $offs, intval(1.2 * $this-&gt;live));</sourceline>
        <sourceline coveredcount="1">            }</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        return true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object register() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ·»å ä¸å°æå¡å¨</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $host</sourceline>
        <sourceline coveredcount="0">     * @param  Integer $weight (default 1)</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function register($host, $weight = 1)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        $this-&gt;host[self::sign($host)] = array(</sourceline>
        <sourceline coveredcount="4">            'host'  =&gt; $host,</sourceline>
        <sourceline coveredcount="4">            'weight'=&gt; max(1, (int)$weight),</sourceline>
        <sourceline coveredcount="4">            'times' =&gt; 0,</sourceline>
        <sourceline coveredcount="0">        );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object unregister() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ³¨éä¸å°æå¡å¨</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $host</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function unregister($host)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $sign = self::sign($host);</sourceline>
        <sourceline coveredcount="1">        if (isset($this-&gt;host[$sign])) {</sourceline>
        <sourceline coveredcount="1">            unset($this-&gt;host[$sign]);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object setOffline() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ è®°ä¸å°æå¡å¨ä¸ºä¸å¯ç¨</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $host (default null)</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function setOffline($host = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $sign = (null === $host) ? $this-&gt;last : self::sign($host);</sourceline>
        <sourceline coveredcount="3">        if (isset($this-&gt;host[$sign])) {</sourceline>
        <sourceline coveredcount="3">            $this-&gt;offs[$sign] = time() + $this-&gt;live;</sourceline>
        <sourceline coveredcount="3">            $this-&gt;pool = null;</sourceline>
        <sourceline coveredcount="3">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object cleanAll() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ¸çææçå¯¹è±¡å±æ§</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function cleanAll()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $this-&gt;host = array();</sourceline>
        <sourceline coveredcount="3">        $this-&gt;offs = array();</sourceline>
        <sourceline coveredcount="3">        $this-&gt;sign = crc32(json_encode($this-&gt;offs));</sourceline>
        <sourceline coveredcount="3">        $this-&gt;last = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        if (!empty($this-&gt;cache)) {</sourceline>
        <sourceline coveredcount="3">            $this-&gt;cache-&gt;cleanAllCache();</sourceline>
        <sourceline coveredcount="3">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Boolean useCache() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ¯å¦ä½¿ç¨ç¼å­</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function useCache()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        return empty($this-&gt;cache) ? false : true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture fetch() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * éæºè·åä¸å°å¯ç¨æå¡å¨</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function fetch()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        $this-&gt;last = $this-&gt;random(array_diff_key($this-&gt;host, $this-&gt;offs));</sourceline>
        <sourceline coveredcount="4">        if (null === $this-&gt;last) {</sourceline>
        <sourceline coveredcount="1">            throw new Exception('There is no available server.');</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $server = &amp;$this-&gt;host[$this-&gt;last];</sourceline>
        <sourceline coveredcount="3">        $server['times']++;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        return $server['host'];</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private Mixture random() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ ¹æ®æééæºéåºä¸å°æå¡å¨</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  Array $host</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function random($host)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        if (empty($this-&gt;pool)) {</sourceline>
        <sourceline coveredcount="4">            $weight = 0;</sourceline>
        <sourceline coveredcount="4">            $hosts  = array_diff_key($this-&gt;host, $this-&gt;offs);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">            $this-&gt;pool = array();</sourceline>
        <sourceline coveredcount="4">            foreach ($hosts AS $sign =&gt; $item) {</sourceline>
        <sourceline coveredcount="3">                $weight += (int)$item['weight'];</sourceline>
        <sourceline coveredcount="3">                $this-&gt;pool[$sign] = $weight;</sourceline>
        <sourceline coveredcount="4">            }</sourceline>
        <sourceline coveredcount="4">            $this-&gt;maxInt = $weight;</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        if (empty($this-&gt;pool)) {</sourceline>
        <sourceline coveredcount="1">            return null;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $index  = array_keys($this-&gt;pool);</sourceline>
        <sourceline coveredcount="3">        $random = rand(0, $this-&gt;maxInt - 1);</sourceline>
        <sourceline coveredcount="3">        $sign   = self::search($random, $index, array_values($this-&gt;pool));</sourceline>
        <sourceline coveredcount="3">        if (null !== $sign) {</sourceline>
        <sourceline coveredcount="3">            return $sign;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">        return reset($index);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">        $random = rand(0, $weight - 1);</sourceline>
        <sourceline coveredcount="-2">        foreach ($stacks AS $key =&gt; $val) {</sourceline>
        <sourceline coveredcount="-2">            if ($val &gt; $random) {</sourceline>
        <sourceline coveredcount="-2">                return $indexs[$key];</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-2">        return reset($indexs);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String  search() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * äºåæ³æ¥æ¾å¯¹åºçæå¡å¨</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function search($mouse, $index, $value, $left = -1, $right = -1)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        if ($left == -1 || $right == -1) {</sourceline>
        <sourceline coveredcount="3">            $left   = 0;</sourceline>
        <sourceline coveredcount="3">            $right  = count($value);</sourceline>
        <sourceline coveredcount="3">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $middle = (int)(($left + $right) / 2);</sourceline>
        <sourceline coveredcount="3">        $snoopy = $value[$middle];</sourceline>
        <sourceline coveredcount="3">        if ((!isset($value[$middle - 1]) || $mouse &gt;= $value[$middle - 1]) &amp;&amp; $mouse &lt; $snoopy) {</sourceline>
        <sourceline coveredcount="3">            return $index[$middle];</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        if (abs($right - $left) &lt;= 1) {</sourceline>
        <sourceline coveredcount="-1">            return null;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        if ($mouse &lt; $snoopy) {</sourceline>
        <sourceline coveredcount="3">            return self::search($mouse, $index, $value, $left, $middle);</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return self::search($mouse, $index, $value, $middle, $right);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String  sign() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æå¡å¨ç­¾å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $host</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function sign($host)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        if (is_scalar($host)) {</sourceline>
        <sourceline coveredcount="4">            return strtolower(trim($host));</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">        return json_encode($host);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static Mixture filterOffs() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ ¹æ®æ¶é´è¿æ»¤ä¸å¯ç¨åè¡¨</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  Array $offs</sourceline>
        <sourceline coveredcount="0">     * @return Array</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function filterOffs($offs)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        $tsamp  = time();</sourceline>
        <sourceline coveredcount="4">        $return = array();</sourceline>
        <sourceline coveredcount="4">        foreach ((array)$offs AS $host =&gt; $time) {</sourceline>
        <sourceline coveredcount="1">            if ($time &lt;= $tsamp) {</sourceline>
        <sourceline coveredcount="1">                continue;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="1">            $return[$host] = $time;</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="4">        ksort($return);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        return $return;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Context" methodcount="7" methodscovered="6" statementcount="37" statementscovered="36" totalcount="44" totalcovered="42">
      <sourcefile name="context.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/context.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | ä¸ä¸æç¯å¢																|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Aleafs.com. All Rights Reserved						|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: aleafs &lt;zhangxc83@sohu.com&gt;									|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: context.lib.php 4 2010-03-09 05:20:36Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Context</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæåé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @æ°æ®åè¡¨</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $data    = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void register() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ³¨åä¸ä¸ªåé</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $val</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function register($key, $val)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        self::$data[(string)$key] = $val;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void unregister() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ³¨éä¸ä¸ªåé</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function unregister($key)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $key = (string)$key;</sourceline>
        <sourceline coveredcount="1">        if (isset(self::$data[$key])) {</sourceline>
        <sourceline coveredcount="1">            unset(self::$data[$key]);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void cleanAllContext() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ¸çææä¸ä¸ææ°æ®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function cleanAllContext()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        self::$data = array();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static Mixture get() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·ååé</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $default : default null</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function get($key, $default = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="12">        $key = (string)$key;</sourceline>
        <sourceline coveredcount="12">        if (isset(self::$data[$key])) {</sourceline>
        <sourceline coveredcount="11">            return self::$data[$key];</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        return $default;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static Mixture userip() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åå½åç¨æ·IP</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  Boolean $bolInt (default false)</sourceline>
        <sourceline coveredcount="0">     * @return String or Integer</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function userip($bolInt = false)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="10">        if (null === ($ret = self::get('__ip__'))) {</sourceline>
        <sourceline coveredcount="2">            $ret = self::_userip();</sourceline>
        <sourceline coveredcount="2">            self::register('__ip__', $ret);</sourceline>
        <sourceline coveredcount="2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="10">        return $bolInt ? sprintf('%u', ip2long($ret)) : $ret;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static Integer pid() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åå½åè¿ç¨å·</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @return Integer</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function pid()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        if (null === ($ret = self::get('__pid__'))) {</sourceline>
        <sourceline coveredcount="1">            $ret = is_callable('posix_getpid') ? posix_getpid() : getmypid();</sourceline>
        <sourceline coveredcount="1">            self::register('__pid__', $ret);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $ret;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String _userip() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¯»åç¨æ·å®éIP</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function _userip()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        $check  = array(</sourceline>
        <sourceline coveredcount="2">            'HTTP_VIA',</sourceline>
        <sourceline coveredcount="2">            'HTTP_X_FORWARDED_FOR',</sourceline>
        <sourceline coveredcount="2">            'HTTP_CLIENT_IP',</sourceline>
        <sourceline coveredcount="2">            'REMOTE_ADDR',</sourceline>
        <sourceline coveredcount="2">        );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">        foreach ($check AS $key) {</sourceline>
        <sourceline coveredcount="2">            if (empty($_SERVER[$key])) {</sourceline>
        <sourceline coveredcount="2">                continue;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">            if (!preg_match_all('/\d+\.\d+\.\d+.\d+/', $_SERVER[$key], $match)) {</sourceline>
        <sourceline coveredcount="-1">                continue;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">            return end(reset($match));</sourceline>
        <sourceline coveredcount="2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">        return 'unknown';</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Dispatcher" methodcount="5" methodscovered="0" statementcount="0" statementscovered="0" totalcount="5" totalcovered="0">
      <sourcefile name="dispatcher.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/dispatcher.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | è¯·æ±è½¬åå¨		    					    							|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copygight (c) 2010 Aleafs.Com. All Rights Reserved						|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: zhangxc &lt;zhangxc83@sohu.com&gt;									|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: autoload.php 22 2010-04-15 16:28:45Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\AutoLoad;</sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Configer;</sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Factory;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Debug\Pool;</sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Parser\Url;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Dispatcher</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ æååé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $url;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $log;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $prefix;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $config;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $timeout    = true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void run() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å¤çå¨å¥å£</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function run($ini, $url, $post = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        require_once __DIR__ . '/autoload.php';</sourceline>
        <sourceline coveredcount="0">        AutoLoad::init();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        try {</sourceline>
        <sourceline coveredcount="0">            $dsp    = new self($ini);</sourceline>
        <sourceline coveredcount="0">            $dsp-&gt;dispach($url, $post);</sourceline>
        <sourceline coveredcount="0">        } catch (\Exception $e) {</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        self::$timeout  = false;</sourceline>
        <sourceline coveredcount="0">        if (empty($GLOBALS['__in_debug_tools']) &amp;&amp; function_exists('fastcgi_finish_request')) {</sourceline>
        <sourceline coveredcount="0">            fastcgi_finish_request();</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void shutdownCallBack() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¯·æ±ç»ææ¶çåè°å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function shutdownCallBack()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        if (true === self::$timeout) {</sourceline>
        <sourceline coveredcount="0">            $this-&gt;log-&gt;error('RUN_TIMEOUT', array(</sourceline>
        <sourceline coveredcount="0">                'url' =&gt; $this-&gt;url,</sourceline>
        <sourceline coveredcount="0">            ));</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private void dispach() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * ååå¤ç</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function dispach($url, $post = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        $this-&gt;url  = preg_replace(</sourceline>
        <sourceline coveredcount="0">            sprintf('/^\/?%s/is', $this-&gt;prefix),</sourceline>
        <sourceline coveredcount="0">            '', $url, 1</sourceline>
        <sourceline coveredcount="0">        );</sourceline>
        <sourceline coveredcount="0">        Pool::push('global.url',    $this-&gt;url);</sourceline>
        <sourceline coveredcount="0">        Pool::push('global.post',   $post);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        $url    = new Url($this-&gt;url);</sourceline>
        <sourceline coveredcount="0">        $ctrl   = self::ctrl($url-&gt;module);</sourceline>
        <sourceline coveredcount="0">        $ctrl   = new $ctrl();</sourceline>
        <sourceline coveredcount="0">        $ctrl-&gt;execute($url-&gt;action, $url-&gt;param, $post);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static string ctrl() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åæ§å¶å¨ç±»å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @return string</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function ctrl($ctrl)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        if (empty($ctrl)) {</sourceline>
        <sourceline coveredcount="0">            return '\Aleafs\Lib\Controller';</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        return sprintf('Controller\\%s', ucfirst(strtolower($ctrl)));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private void __construct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param String $ini</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function __construct($ini)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        Configer::register('default',   $ini);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        $this-&gt;config   = Configer::instance('default');</sourceline>
        <sourceline coveredcount="0">        $this-&gt;log      = Factory::getLog($this-&gt;config-&gt;get('log.url', ''));</sourceline>
        <sourceline coveredcount="0">        $this-&gt;prefix   = trim($this-&gt;config-&gt;get('url.prefix', ''), '/ ');</sourceline>
        <sourceline coveredcount="0">        foreach ($this-&gt;config-&gt;get('includes', array()) AS $name =&gt; $file) {</sourceline>
        <sourceline coveredcount="0">            Configer::register($name,   $file);</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        set_time_limit($this-&gt;config-&gt;get('timeout', 30));</sourceline>
        <sourceline coveredcount="0">        register_shutdown_function(array(&amp;$this, 'shutdownCallBack'));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Debug\Pool" methodcount="4" methodscovered="4" statementcount="22" statementscovered="22" totalcount="26" totalcovered="26">
      <sourcefile name="pool.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/debug/pool.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Debug å·¥å·ç±»														|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Taobao.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: pengchun &lt;pengchun@taobao.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: var.php 48 2010-04-26 15:58:11Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib\Debug;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Pool</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæåé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $open  = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $debug = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void openDebug() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åæ¢debugå¼å³</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  Boolean $open</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function openDebug($open)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        self::$open = (bool)$open;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void push() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå¥debugæ°æ®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $val</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function push($key, $val)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        if (!self::$open) {</sourceline>
        <sourceline coveredcount="1">            return false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        if (!isset(self::$debug[$key])) {</sourceline>
        <sourceline coveredcount="1">            self::$debug[$key] = $val;</sourceline>
        <sourceline coveredcount="1">            return $val;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        if (!is_array(self::$debug[$key])) {</sourceline>
        <sourceline coveredcount="1">            self::$debug[$key] = array(self::$debug[$key]);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="1">        self::$debug[$key][] = $val;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return count(self::$debug[$key]);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void clean() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ¸çæædebugæ°æ®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function clean()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        self::$debug = array();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static String dump() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æåºdebugæ°æ®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $key (default null)</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function dump($key = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        if (null === $key) {</sourceline>
        <sourceline coveredcount="1">            return var_export(self::$debug, true);</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">        if (!isset(self::$debug[$key])) {</sourceline>
        <sourceline coveredcount="1">            return 'NULL';</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return var_export(self::$debug[$key], true);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Debug\Timer" methodcount="4" methodscovered="4" statementcount="13" statementscovered="13" totalcount="17" totalcovered="17">
      <sourcefile name="timer.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/debug/timer.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Debug è®¡æ¶å¨														|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Taobao.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: pengchun &lt;pengchun@taobao.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: timer.php 48 2010-04-26 15:58:11Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib\Debug;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Timer</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	/* {{{ éæåé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	private static $opened	= false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	private static $timer	= array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	/* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	/* {{{ public static void init() */</sourceline>
        <sourceline coveredcount="0">	/**</sourceline>
        <sourceline coveredcount="0">	 * åå§åè®¡æ¶å¨</sourceline>
        <sourceline coveredcount="0">	 *</sourceline>
        <sourceline coveredcount="0">	 * @access public static</sourceline>
        <sourceline coveredcount="0">	 * @param Boolean $open</sourceline>
        <sourceline coveredcount="0">	 * @return void</sourceline>
        <sourceline coveredcount="0">	 */</sourceline>
        <sourceline coveredcount="0">	public static function init($open)</sourceline>
        <sourceline coveredcount="0">	{</sourceline>
        <sourceline coveredcount="1">		self::$opened	= (bool)$open;</sourceline>
        <sourceline coveredcount="0">	}</sourceline>
        <sourceline coveredcount="0">	/* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	/* {{{ public static void start() */</sourceline>
        <sourceline coveredcount="0">	/**</sourceline>
        <sourceline coveredcount="0">	 * å¼å§è®¡æ¶</sourceline>
        <sourceline coveredcount="0">	 *</sourceline>
        <sourceline coveredcount="0">	 * @access public static</sourceline>
        <sourceline coveredcount="0">	 * @param String $key</sourceline>
        <sourceline coveredcount="0">	 * @return void</sourceline>
        <sourceline coveredcount="0">	 */</sourceline>
        <sourceline coveredcount="0">	public static function start($key)</sourceline>
        <sourceline coveredcount="0">	{</sourceline>
        <sourceline coveredcount="1">		if (self::$opened) {</sourceline>
        <sourceline coveredcount="1">			self::$timer[self::normarlize($key)] = microtime(true);</sourceline>
        <sourceline coveredcount="1">		}</sourceline>
        <sourceline coveredcount="0">	}</sourceline>
        <sourceline coveredcount="0">	/* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	/* {{{ public static Mixture elapsed() */</sourceline>
        <sourceline coveredcount="0">	/**</sourceline>
        <sourceline coveredcount="0">	 * è·åèæ¶</sourceline>
        <sourceline coveredcount="0">	 *</sourceline>
        <sourceline coveredcount="0">	 * @access public static</sourceline>
        <sourceline coveredcount="0">	 * @param  String $key</sourceline>
        <sourceline coveredcount="0">	 * @return Mixture</sourceline>
        <sourceline coveredcount="0">	 */</sourceline>
        <sourceline coveredcount="0">	public static function elapsed($key)</sourceline>
        <sourceline coveredcount="0">	{</sourceline>
        <sourceline coveredcount="1">		$key = self::normarlize($key);</sourceline>
        <sourceline coveredcount="1">		if (empty(self::$timer[$key])) {</sourceline>
        <sourceline coveredcount="1">			return null;</sourceline>
        <sourceline coveredcount="-2">		}</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		$beg = self::$timer[$key];</sourceline>
        <sourceline coveredcount="1">		unset(self::$timer[$key]);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">		return number_format(microtime(true) - $beg, 6);</sourceline>
        <sourceline coveredcount="0">	}</sourceline>
        <sourceline coveredcount="0">	/* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	/* {{{ private static string normarlize() */</sourceline>
        <sourceline coveredcount="0">	/**</sourceline>
        <sourceline coveredcount="0">	 * KEYå½ä¸å</sourceline>
        <sourceline coveredcount="0">	 *</sourceline>
        <sourceline coveredcount="0">	 * @access private static</sourceline>
        <sourceline coveredcount="0">	 * @param string $key</sourceline>
        <sourceline coveredcount="0">	 * @return string</sourceline>
        <sourceline coveredcount="0">	 */</sourceline>
        <sourceline coveredcount="0">	private static function normarlize($key)</sourceline>
        <sourceline coveredcount="0">	{</sourceline>
        <sourceline coveredcount="1">		return strtolower(trim($key));</sourceline>
        <sourceline coveredcount="0">	}</sourceline>
        <sourceline coveredcount="0">	/* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Stream\Mo" methodcount="9" methodscovered="4" statementcount="90" statementscovered="82" totalcount="99" totalcovered="86">
      <sourcefile name="mo.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/stream/mo.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | stream\mo.php	Moæä»¶è§£æ											|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Aleafs.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: aleafs &lt;zhangxc83@sohu.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: mo.php 94 2010-06-02 13:43:29Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib\Stream;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Exception;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Mo</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ æååé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $mofile = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $mosize = 0;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $iotime = 0;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $findtm = 0;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $isload = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $header     = array();</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @åå§è¯­è¨å­æ¾å­å¸</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private $original   = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @ç¿»è¯ç»æå­æ¾å­å¸</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private $translate  = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void __construct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $file</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __construct($file)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $this-&gt;mofile   = realpath($file);</sourceline>
        <sourceline coveredcount="3">        if (empty($this-&gt;mofile)) {</sourceline>
        <sourceline coveredcount="-1">            throw new Exception(sprintf('No such mo file as "%s"', $file));</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $this-&gt;mosize   = filesize($this-&gt;mofile);</sourceline>
        <sourceline coveredcount="3">        $this-&gt;iotime   = 0;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture gettext() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åå­ç¬¦ä¸²ç¿»è¯</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $string</sourceline>
        <sourceline coveredcount="0">     * @return String or Boolean false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function gettext($string)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        if (empty($this-&gt;isload) &amp;&amp; !$this-&gt;_load()) {</sourceline>
        <sourceline coveredcount="-1">            return false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $intIdx = $this-&gt;find($string);</sourceline>
        <sourceline coveredcount="3">        if ($intIdx &lt; 0) {</sourceline>
        <sourceline coveredcount="1">            return false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        return $this-&gt;_get_translate($intIdx);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture debugInfo() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åè°è¯ä¿¡æ¯</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function debugInfo()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        return array(</sourceline>
        <sourceline coveredcount="2">            'mofile'    =&gt; $this-&gt;mofile,</sourceline>
        <sourceline coveredcount="2">            'iotime'    =&gt; $this-&gt;iotime,</sourceline>
        <sourceline coveredcount="2">            'search'    =&gt; $this-&gt;findtm,</sourceline>
        <sourceline coveredcount="2">        );</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private Boolean _load() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å è½½moæä»¶</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function _load()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $this-&gt;isload   = true;</sourceline>
        <sourceline coveredcount="3">        if (!$this-&gt;parseHead($this-&gt;_read(0, 20))) {</sourceline>
        <sourceline coveredcount="-1">            return false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $unpack = sprintf('%s%d', $this-&gt;header['pack'], 2 * $this-&gt;header['count']);</sourceline>
        <sourceline coveredcount="3">        $intAll = 8 * $this-&gt;header['count'];</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $this-&gt;original = unpack($unpack, $this-&gt;_read($this-&gt;header['off_o'], $intAll));</sourceline>
        <sourceline coveredcount="3">        $this-&gt;translate= unpack($unpack, $this-&gt;_read($this-&gt;header['off_t'], $intAll));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        return true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private Mixture parseHead() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¯»åMOæä»¶å¤´ä¿¡æ¯</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  String $data</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function parseHead($data)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $intVal = array_shift(unpack('V', substr($data, 0, 4)));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $MAGIC1 = (int) - 1794895138;</sourceline>
        <sourceline coveredcount="0">        // $MAGIC2 = (int)0xde120495; //bug</sourceline>
        <sourceline coveredcount="3">        $MAGIC2 = (int) - 569244523;</sourceline>
        <sourceline coveredcount="0">        // 64-bit fix</sourceline>
        <sourceline coveredcount="3">        $MAGIC3 = (int) 2500072158;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        if ($intVal == $MAGIC1 || $intVal == $MAGIC3) {</sourceline>
        <sourceline coveredcount="3">            $strVal = 'V';        /**&lt;  little endian      */</sourceline>
        <sourceline coveredcount="3">        } elseif ($intVal == ($MAGIC2 &amp; 0xFFFFFFFF)) {</sourceline>
        <sourceline coveredcount="-1">            $strVal = 'N';        /**&lt;  big endian      */</sourceline>
        <sourceline coveredcount="-1">        } else {</sourceline>
        <sourceline coveredcount="-1">            return false;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $arrVal = unpack(sprintf('%s4', $strVal), substr($data, 4));</sourceline>
        <sourceline coveredcount="3">        $this-&gt;header = array(</sourceline>
        <sourceline coveredcount="3">            'pack'  =&gt; $strVal,</sourceline>
        <sourceline coveredcount="3">            'rev'   =&gt; $arrVal[1],</sourceline>
        <sourceline coveredcount="3">            'count' =&gt; $arrVal[2],</sourceline>
        <sourceline coveredcount="3">            'off_o' =&gt; $arrVal[3],</sourceline>
        <sourceline coveredcount="3">            'off_t' =&gt; $arrVal[4],</sourceline>
        <sourceline coveredcount="0">        );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        return true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private String  _read() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¯»åæä»¶åºå®é¿åº¦</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  Integer $off</sourceline>
        <sourceline coveredcount="0">     * @param  Integer $len</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function _read($off, $len)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $len = (int)$len;</sourceline>
        <sourceline coveredcount="3">        if ($len &lt; 1) {</sourceline>
        <sourceline coveredcount="1">            return '';</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $this-&gt;iotime++;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $off = (int)$off;</sourceline>
        <sourceline coveredcount="3">        $off = $off &lt; 0 ? $this-&gt;mosize + $off : $off;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        return (string)file_get_contents(</sourceline>
        <sourceline coveredcount="3">            $this-&gt;mofile, false, null, $off,</sourceline>
        <sourceline coveredcount="3">            min($len, $this-&gt;mosize - $off)</sourceline>
        <sourceline coveredcount="3">        );</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private Integer find() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * äºåæ³æ¥æ¾åå§å­ç¬¦ä¸²</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  String $string</sourceline>
        <sourceline coveredcount="0">     * @return Integer</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function find($string, $beg = -1, $end = -1)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        if ($beg &lt; 0 || $end &lt; 0) {</sourceline>
        <sourceline coveredcount="3">            $beg = 0;</sourceline>
        <sourceline coveredcount="3">            $end = $this-&gt;header['count'];</sourceline>
        <sourceline coveredcount="3">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $this-&gt;findtm++;</sourceline>
        <sourceline coveredcount="3">        if (abs($end - $beg) &lt;= 1) {</sourceline>
        <sourceline coveredcount="1">            if (0 == strcmp($string, $this-&gt;_get_original($beg))) {</sourceline>
        <sourceline coveredcount="-1">                return $beg;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">            return -1;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        if ($beg &gt; $end) {</sourceline>
        <sourceline coveredcount="-1">            return $this-&gt;find($string, $end, $beg);</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $index  = (int)(($beg + $end) / 2);</sourceline>
        <sourceline coveredcount="3">        $cmp    = strcmp($string, $this-&gt;_get_original($index));</sourceline>
        <sourceline coveredcount="3">        if ($cmp &gt; 0) {</sourceline>
        <sourceline coveredcount="2">            return $this-&gt;find($string, $index, $end);</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        if ($cmp &lt; 0) {</sourceline>
        <sourceline coveredcount="1">            return $this-&gt;find($string, $beg, $index);</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        return $index;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private String _get_original() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·ååå§å­ç¬¦ä¸²</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  Integer $index</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function _get_original($index)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $index *= 2;</sourceline>
        <sourceline coveredcount="3">        return $this-&gt;_read(</sourceline>
        <sourceline coveredcount="3">            $this-&gt;original[$index + 2],</sourceline>
        <sourceline coveredcount="3">            $this-&gt;original[$index + 1]</sourceline>
        <sourceline coveredcount="3">        );</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private String _get_translate() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åç¿»è¯å­ç¬¦ä¸²</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  Integer $index</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function _get_translate($index)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $index *= 2;</sourceline>
        <sourceline coveredcount="3">        return $this-&gt;_read(</sourceline>
        <sourceline coveredcount="3">            $this-&gt;translate[$index + 2],</sourceline>
        <sourceline coveredcount="3">            $this-&gt;translate[$index + 1]</sourceline>
        <sourceline coveredcount="3">        );</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Stream\Text" methodcount="0" methodscovered="0" statementcount="0" statementscovered="0" totalcount="0" totalcovered="0">
      <sourcefile name="text.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/stream/text.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | stream\text.php	    											|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Aleafs.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: aleafs &lt;zhangxc83@sohu.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: text.php 2010-06-02 aleafs Exp $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib\Stream;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Text</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæå¸¸é */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @è¯»åç¼å­</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    const READ_BUFFER   = 10485760;       /**&lt; 10M       */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @è¯»åè¿åç </sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    const READ_ERROR = 0;          /**&lt;  åºé      */</sourceline>
        <sourceline coveredcount="0">    const READ_MORE  = 1;          /**&lt;  ç»§ç»­      */</sourceline>
        <sourceline coveredcount="0">    const READ_EOF   = 2;          /**&lt;  å®æ      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Configer\Ini" methodcount="2" methodscovered="2" statementcount="5" statementscovered="5" totalcount="7" totalcovered="7">
      <sourcefile name="ini.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/config/ini.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | INIéç½®è§£æç±»														|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Taobao.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: pengchun &lt;pengchun@taobao.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: ini.php 58 2010-05-05 00:14:58Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib\Configer;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Ini</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $url;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    public function __construct($url)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $this-&gt;url = $url;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    public function parse()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $var = parse_ini_file($this-&gt;url['path'], true);</sourceline>
        <sourceline coveredcount="1">        $ret = $var;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $ret;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\LibTestShell" methodcount="1" methodscovered="1" statementcount="2" statementscovered="2" totalcount="3" totalcovered="3">
      <sourcefile name="TestShell.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/TestShell.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Unit Test Case Class												|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Taobao.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: pengchun &lt;pengchun@taobao.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: TestShell.php 47 2010-04-26 05:27:46Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">require_once(__DIR__ . '/autoload.php');</sourceline>
        <sourceline coveredcount="0">require_once('PHPUnit/Framework/TestCase.php');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">date_default_timezone_set('Asia/Shanghai');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class LibTestShell extends \PHPUnit_Framework_TestCase</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">	protected function setUp()</sourceline>
        <sourceline coveredcount="0">	{</sourceline>
        <sourceline coveredcount="50">		parent::setUp();</sourceline>
        <sourceline coveredcount="50">		AutoLoad::init();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Log" methodcount="10" methodscovered="7" statementcount="96" statementscovered="90" totalcount="106" totalcovered="97">
      <sourcefile name="log.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/log.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | æ¥å¿ç±»	    														|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Taobao.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: pengchun &lt;pengchun@taobao.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: log.php 86 2010-06-01 03:52:51Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Log</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæå¸¸é */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    const LOG_DEBUG     = 1;</sourceline>
        <sourceline coveredcount="0">    const LOG_NOTICE    = 2;</sourceline>
        <sourceline coveredcount="0">    const LOG_WARN      = 8;</sourceline>
        <sourceline coveredcount="0">    const LOG_ERROR     = 16;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæå¸¸é */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $symbol = array();         /**&lt;  æä»¶åä¸­çééç¬¦      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ æååé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $url    = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $file   = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $level  = 0;          /**&lt;  æ¥å¿çº§å«      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $iotime = 0;          /**&lt;  ç£çIOæ¬¡æ°      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $buffer = '';         /**&lt;  æ°æ®ç¼å²åº      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $cache  = 4096;       /**&lt;  æå¤§ç¼å²é      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $circuit = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void __construct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $url</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __construct($url)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="7">        $this-&gt;url  = trim($url);</sourceline>
        <sourceline coveredcount="7">        $this-&gt;file = null;</sourceline>
        <sourceline coveredcount="7">        $this-&gt;init();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void __destruct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * ææå½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __destruct()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="6">        $this-&gt;flush(true);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void debug() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åDebugæ¥å¿</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  String $name</sourceline>
        <sourceline coveredcount="0">     * @param  String $data</sourceline>
        <sourceline coveredcount="0">     * @param  String $token</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function debug($name, $data, $token = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="9">        if ($this-&gt;level &amp; self::LOG_DEBUG) {</sourceline>
        <sourceline coveredcount="6">            return $this-&gt;insert('DEBUG', $name, $data, $token);</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void notice() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åNoticeæ¥å¿</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  String $name</sourceline>
        <sourceline coveredcount="0">     * @param  String $data</sourceline>
        <sourceline coveredcount="0">     * @param  String $token</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function notice($name, $data, $token = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="8">        if ($this-&gt;level &amp; self::LOG_NOTICE) {</sourceline>
        <sourceline coveredcount="5">            return $this-&gt;insert('NOTICE', $name, $data, $token);</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void warn() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åWarnæ¥å¿</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  String $name</sourceline>
        <sourceline coveredcount="0">     * @param  String $data</sourceline>
        <sourceline coveredcount="0">     * @param  String $token</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function warn($name, $data, $token = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="6">        if ($this-&gt;level &amp; self::LOG_WARN) {</sourceline>
        <sourceline coveredcount="3">            return $this-&gt;insert('WARN', $name, $data, $token);</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void error() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åErroræ¥å¿</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  String $name</sourceline>
        <sourceline coveredcount="0">     * @param  String $data</sourceline>
        <sourceline coveredcount="0">     * @param  String $token</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function error($name, $data, $token = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="5">        if ($this-&gt;level &amp; self::LOG_ERROR) {</sourceline>
        <sourceline coveredcount="2">            return $this-&gt;insert('ERROR', $name, $data, $token);</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture __get() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * é­æ¯æ¹æ³__get</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __get($key)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="6">        if (!isset($this-&gt;$key)) {</sourceline>
        <sourceline coveredcount="-1">            return null;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="6">        return $this-&gt;$key;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private Boolean insert() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå¥ä¸è¡æ¥å¿</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  String $char : æ¥å¿çº§å«</sourceline>
        <sourceline coveredcount="0">     * @param  String $name</sourceline>
        <sourceline coveredcount="0">     * @param  String $data</sourceline>
        <sourceline coveredcount="0">     * @param  String $token</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function insert($char, $name, $data, $token)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="9">        if (empty($this-&gt;file)) {</sourceline>
        <sourceline coveredcount="-1">            return false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="9">        $name = empty($name) ? 'UNKOWN' : $name;</sourceline>
        <sourceline coveredcount="9">        $data = empty($data) ? '-' : $data;</sourceline>
        <sourceline coveredcount="9">        $this-&gt;buffer .= sprintf(</sourceline>
        <sourceline coveredcount="9">            "%s:\t[%s]\t%s\t%s\t%s\t%s\n",</sourceline>
        <sourceline coveredcount="9">            $char, date('Y-m-d H:i:s'),</sourceline>
        <sourceline coveredcount="9">            Context::userip(),</sourceline>
        <sourceline coveredcount="9">            strtoupper($name),</sourceline>
        <sourceline coveredcount="9">            empty($token) ? '-' : $token,</sourceline>
        <sourceline coveredcount="9">            is_scalar($data) ? $data : json_encode($data)</sourceline>
        <sourceline coveredcount="9">        );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="9">        if (strlen($this-&gt;buffer) &gt;= $this-&gt;cache) {</sourceline>
        <sourceline coveredcount="8">            $this-&gt;flush();</sourceline>
        <sourceline coveredcount="8">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="9">        return true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private Boolean flush() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å°æ¥å¿åºåå¨ç£çä¸</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function flush($try = false)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="9">        if (empty($this-&gt;buffer) || ($try !== true &amp;&amp; $this-&gt;circuit)) {</sourceline>
        <sourceline coveredcount="5">            return true;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="9">        $err = error_reporting();</sourceline>
        <sourceline coveredcount="9">        error_reporting($err ^ E_WARNING);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="9">        if (!is_file($this-&gt;file)) {</sourceline>
        <sourceline coveredcount="9">            $dir = dirname($this-&gt;file);</sourceline>
        <sourceline coveredcount="9">            if (!is_dir($dir)) {</sourceline>
        <sourceline coveredcount="-1">                mkdir($dir, 0744, true);</sourceline>
        <sourceline coveredcount="-1">            }</sourceline>
        <sourceline coveredcount="9">        }</sourceline>
        <sourceline coveredcount="9">        $len = file_put_contents($this-&gt;file, $this-&gt;buffer, FILE_APPEND);</sourceline>
        <sourceline coveredcount="9">        error_reporting($err);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="9">        $max = strlen($this-&gt;buffer);</sourceline>
        <sourceline coveredcount="9">        $this-&gt;buffer = (string)substr($this-&gt;buffer, (int)$len);</sourceline>
        <sourceline coveredcount="9">        $this-&gt;iotime++;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="9">        if (false === $len || $len &lt; $max) {</sourceline>
        <sourceline coveredcount="-1">            $this-&gt;circuit = true;</sourceline>
        <sourceline coveredcount="-1">            return false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="9">        return true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private Boolean init() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå§åæ¥å¿å¯¹è±¡</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function init()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="7">        $url = parse_url($this-&gt;url);</sourceline>
        <sourceline coveredcount="7">        if (isset($url['query']) &amp;&amp; preg_match('/[\?&amp;]?buffer=(\d+)/is', $url['query'], $match)) {</sourceline>
        <sourceline coveredcount="5">            $this-&gt;cache = (int)$match[1];</sourceline>
        <sourceline coveredcount="5">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">        $this-&gt;file     = isset($url['path']) ? $url['path'] : '';</sourceline>
        <sourceline coveredcount="7">        if (0 === strpos($this-&gt;file, '/')) {</sourceline>
        <sourceline coveredcount="7">            $this-&gt;file = substr($this-&gt;file, 1);</sourceline>
        <sourceline coveredcount="7">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">        $this-&gt;level    = 0;</sourceline>
        <sourceline coveredcount="7">        $tmp = array_flip(explode('.', strtolower($url['host'])));</sourceline>
        <sourceline coveredcount="7">        if (isset($tmp['debug'])) {</sourceline>
        <sourceline coveredcount="4">            $this-&gt;level += self::LOG_DEBUG;</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="7">        if (isset($tmp['notice'])) {</sourceline>
        <sourceline coveredcount="4">            $this-&gt;level += self::LOG_NOTICE;</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="7">        if (isset($tmp['warn'])) {</sourceline>
        <sourceline coveredcount="4">            $this-&gt;level += self::LOG_WARN;</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="7">        if (isset($tmp['error'])) {</sourceline>
        <sourceline coveredcount="4">            $this-&gt;level += self::LOG_ERROR;</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">        if (empty(self::$symbol) &amp;&amp; $this-&gt;level &gt; 0) {</sourceline>
        <sourceline coveredcount="1">            self::$symbol = array(</sourceline>
        <sourceline coveredcount="1">                '{DATE}'  =&gt; date('Ymd'),</sourceline>
        <sourceline coveredcount="1">                '{HOUR}'  =&gt; date('H'),</sourceline>
        <sourceline coveredcount="1">                '{WEEK}'  =&gt; date('w'),</sourceline>
        <sourceline coveredcount="1">            );</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">        if (!empty(self::$symbol)) {</sourceline>
        <sourceline coveredcount="7">            $this-&gt;file = str_replace(</sourceline>
        <sourceline coveredcount="7">                array_keys(self::$symbol),</sourceline>
        <sourceline coveredcount="7">                self::$symbol, $this-&gt;file</sourceline>
        <sourceline coveredcount="7">            );</sourceline>
        <sourceline coveredcount="7">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">        return true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Cache\File" methodcount="9" methodscovered="6" statementcount="77" statementscovered="72" totalcount="86" totalcovered="78">
      <sourcefile name="file.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/cache/file.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | æä»¶ç¼å­ç±»         												|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Aleafs.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: aleafs &lt;zhangxc83@sohu.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: file.php 2010-05-29 aleafs Exp $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib\Cache;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Exception;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class File</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæå¸¸é */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    const EXPIRE    = 3600;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ æååé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $path   = '/tmp/acache';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $mode   = 0744;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $prefix = '';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void __construct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $prefix</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __construct($prefix, $path = null, $mode = 0744)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        $this-&gt;prefix   = (string)$prefix;</sourceline>
        <sourceline coveredcount="4">        $this-&gt;mode     = $mode;</sourceline>
        <sourceline coveredcount="4">        if (!empty($path)) {</sourceline>
        <sourceline coveredcount="4">            $this-&gt;path = trim((string)$path);</sourceline>
        <sourceline coveredcount="4">        } else {</sourceline>
        <sourceline coveredcount="-1">            $this-&gt;path = '/tmp/acache';</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture get() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¯»åCACHEåå®¹</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function get($key)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $res = $this-&gt;getfile($key, false);</sourceline>
        <sourceline coveredcount="3">        if (!is_file($res)) {</sourceline>
        <sourceline coveredcount="2">            return null;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $ret = json_decode(file_get_contents($res), true);</sourceline>
        <sourceline coveredcount="3">        if (empty($ret) || empty($ret['ttl']) || $ret['ttl'] &lt; time()) {</sourceline>
        <sourceline coveredcount="1">            unlink($res);</sourceline>
        <sourceline coveredcount="1">            return null;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        return $ret['val'];</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Boolean set() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å­å¨CACHEæ°æ®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $value</sourceline>
        <sourceline coveredcount="0">     * @param  Interger $expire : default null</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function set($key, $value, $expire = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        $now = time();</sourceline>
        <sourceline coveredcount="4">        return file_put_contents(</sourceline>
        <sourceline coveredcount="4">            $this-&gt;getfile($key, true),</sourceline>
        <sourceline coveredcount="3">            json_encode(array(</sourceline>
        <sourceline coveredcount="3">                'now'   =&gt; $now,</sourceline>
        <sourceline coveredcount="3">                'ttl'   =&gt; $now + ($expire ? $expire : self::EXPIRE),</sourceline>
        <sourceline coveredcount="3">                'val'   =&gt; $value,</sourceline>
        <sourceline coveredcount="3">            )),</sourceline>
        <sourceline coveredcount="3">            LOCK_EX, null</sourceline>
        <sourceline coveredcount="3">        ) ? true : false;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Boolean delete() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å é¤ç¼å­æ°æ®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param String $key</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function delete($key)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $res = $this-&gt;getfile($key, false);</sourceline>
        <sourceline coveredcount="1">        if (is_file($res) &amp;&amp; !unlink($res)) {</sourceline>
        <sourceline coveredcount="-1">            return false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture shell() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * ç¼å­åè°shell</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  Callback $callback</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @param  Interger $expire : default null</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function shell($callback, $key, $expire = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $ret = $this-&gt;get($key);</sourceline>
        <sourceline coveredcount="1">        if (empty($ret)) {</sourceline>
        <sourceline coveredcount="1">            $ret = call_user_func($callback, $key);</sourceline>
        <sourceline coveredcount="1">            if ($ret) {</sourceline>
        <sourceline coveredcount="1">                $this-&gt;set($key, $ret, $expire);</sourceline>
        <sourceline coveredcount="1">            }</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $ret;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Boolean cleanAllCache() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ¸çææç¼å­</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function cleanAllCache()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        return self::rmdir(sprintf(</sourceline>
        <sourceline coveredcount="4">            '%s/%s',</sourceline>
        <sourceline coveredcount="4">            rtrim($this-&gt;path, '/'),</sourceline>
        <sourceline coveredcount="4">            trim($this-&gt;prefix, '/')</sourceline>
        <sourceline coveredcount="4">        ));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private String getfile() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ ¹æ®KEYè·åå­å¨çå®æ´æä»¶å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  String  $key</sourceline>
        <sourceline coveredcount="0">     * @param  Boolean $create : default false</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function getfile($key, $create = false)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        $ret = sprintf(</sourceline>
        <sourceline coveredcount="4">            '%s/%s/%s',</sourceline>
        <sourceline coveredcount="4">            rtrim($this-&gt;path, '/'),</sourceline>
        <sourceline coveredcount="4">            trim($this-&gt;prefix, '/'),</sourceline>
        <sourceline coveredcount="4">            trim($this-&gt;hash($key), '/')</sourceline>
        <sourceline coveredcount="4">        );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        if ($create &amp;&amp; !is_file($ret)) {</sourceline>
        <sourceline coveredcount="4">            $dir = dirname($ret);</sourceline>
        <sourceline coveredcount="4">            if (!is_dir($dir) &amp;&amp; !mkdir($dir, $this-&gt;mode, true)) {</sourceline>
        <sourceline coveredcount="1">                throw new Exception(sprintf('Derectory "%s" not exists, and created failed.', $dir));</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="3">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        return $ret;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String hash() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ ¹æ®KEYè®¡ç®å­å¨çæä»¶å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function hash($key)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        return implode('/', str_split(bin2hex($key), 3));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static Boolean rmdir() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å®å¨æ¸çä¸ä¸ªç®å½</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String $dir</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function rmdir($dir)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        if (!is_dir($dir)) {</sourceline>
        <sourceline coveredcount="1">            return true;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        if (false === ($ret = glob($dir . '/*'))) {</sourceline>
        <sourceline coveredcount="-1">            return false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        foreach ($ret AS $sub) {</sourceline>
        <sourceline coveredcount="3">            if (is_dir($sub)) {</sourceline>
        <sourceline coveredcount="3">                if (!self::rmdir($sub)) {</sourceline>
        <sourceline coveredcount="-1">                    return false;</sourceline>
        <sourceline coveredcount="-2">                }</sourceline>
        <sourceline coveredcount="3">            } else {</sourceline>
        <sourceline coveredcount="2">                if (!unlink($sub)) {</sourceline>
        <sourceline coveredcount="-1">                    return false;</sourceline>
        <sourceline coveredcount="-2">                }</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="4">        return rmdir($dir);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Cache\Mcache" methodcount="12" methodscovered="8" statementcount="135" statementscovered="130" totalcount="147" totalcovered="138">
      <sourcefile name="mcache.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/cache/mcache.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Mcacheç¼å­ç±»	        											|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Aleafs.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: aleafs &lt;zhangxc83@sohu.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: mcache.php 63 2010-05-12 07:40:08Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib\Cache;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Factory;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Mcache</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæåé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @é»è®¤éç½®</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $default = array(</sourceline>
        <sourceline coveredcount="0">        'logurl'    =&gt; null,</sourceline>
        <sourceline coveredcount="0">        'logtime'   =&gt; false,</sourceline>
        <sourceline coveredcount="0">        'prefix'    =&gt; '',</sourceline>
        <sourceline coveredcount="0">        'expire'    =&gt; 3600,</sourceline>
        <sourceline coveredcount="0">        'server'    =&gt; array(),</sourceline>
        <sourceline coveredcount="0">        'timeout'   =&gt; array(</sourceline>
        <sourceline coveredcount="0">            'connect'   =&gt; 300,</sourceline>
        <sourceline coveredcount="0">            'write'     =&gt; 100,</sourceline>
        <sourceline coveredcount="0">            'read'      =&gt; 500,</sourceline>
        <sourceline coveredcount="0">        ),</sourceline>
        <sourceline coveredcount="0">    );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ æååé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $ini;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $log;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $obj;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $cas    = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $timer  = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $bufferWrite    = true;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void __construct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  Array $ini</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __construct(Array $ini)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $this-&gt;ini  = array_merge(self::$default, (array)$ini);</sourceline>
        <sourceline coveredcount="3">        if (!empty($this-&gt;ini['logurl'])) {</sourceline>
        <sourceline coveredcount="3">            $this-&gt;log  = Factory::getLog($this-&gt;ini['logurl']);</sourceline>
        <sourceline coveredcount="3">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $this-&gt;initMcache();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void setBufferWrite() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è®¾ç½®æ¯å¦ç¼å²åå¥</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  Boolean $buffer</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function setBufferWrite($buffer)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $this-&gt;bufferWrite  = (bool)$buffer;</sourceline>
        <sourceline coveredcount="3">        if (!empty($this-&gt;obj)) {</sourceline>
        <sourceline coveredcount="3">            $this-&gt;obj-&gt;setOption(</sourceline>
        <sourceline coveredcount="3">                \Memcached::OPT_BUFFER_WRITES,</sourceline>
        <sourceline coveredcount="3">                $this-&gt;bufferWrite</sourceline>
        <sourceline coveredcount="3">            );</sourceline>
        <sourceline coveredcount="3">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture get() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * ååºæ°æ®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function get($key)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        if (!is_array($key)) {</sourceline>
        <sourceline coveredcount="3">            $key = (string)$key;</sourceline>
        <sourceline coveredcount="3">            if (!isset($this-&gt;cas[$key])) {</sourceline>
        <sourceline coveredcount="3">                $this-&gt;cas[$key] = null;</sourceline>
        <sourceline coveredcount="3">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">            $this-&gt;beginTimer();</sourceline>
        <sourceline coveredcount="3">            $ret = $this-&gt;obj-&gt;get($key, null, $this-&gt;cas[$key]);</sourceline>
        <sourceline coveredcount="3">            $this-&gt;writeLog('GET', $key, $this-&gt;getElapsed());</sourceline>
        <sourceline coveredcount="3">            return (false !== $ret) ? $ret : null;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $cas = null;</sourceline>
        <sourceline coveredcount="1">        $this-&gt;beginTimer();</sourceline>
        <sourceline coveredcount="1">        $tmp = $this-&gt;obj-&gt;getMulti($key, $cas, null);</sourceline>
        <sourceline coveredcount="1">        $this-&gt;writeLog('MULTI_GET', $key, $this-&gt;getElapsed());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $ret = array_fill_keys($key, null);</sourceline>
        <sourceline coveredcount="1">        if (!empty($ret)) {</sourceline>
        <sourceline coveredcount="1">            $ret = array_merge($ret, (array)$tmp);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        if (!empty($cas)) {</sourceline>
        <sourceline coveredcount="1">            $this-&gt;cas = array_merge($this-&gt;cas, $cas);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $ret;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Boolean set() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å­å¥æ°æ®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $value</sourceline>
        <sourceline coveredcount="0">     * @param  Integer $expire (default null)</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function set($key, $value, $expire = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $expire = empty($expire) ? $this-&gt;ini['expire'] : $expire;</sourceline>
        <sourceline coveredcount="3">        $this-&gt;beginTimer();</sourceline>
        <sourceline coveredcount="3">        if (empty($this-&gt;cas[$key])) {</sourceline>
        <sourceline coveredcount="3">            $ret = $this-&gt;obj-&gt;add($key, $value, $expire);</sourceline>
        <sourceline coveredcount="3">        } else {</sourceline>
        <sourceline coveredcount="-1">            $ret = $this-&gt;obj-&gt;cas($this-&gt;cas[$key], $key, $value, $expire);</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="3">        $this-&gt;writeLog('SET', $key, $this-&gt;getElapsed());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        if (false != $ret || \Memcached::RES_NOTSTORED == $this-&gt;obj-&gt;getResultCode()) {</sourceline>
        <sourceline coveredcount="3">            return true;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">        return false;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Boolean multiSet() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * ä»¥å³èæ°æ®è®¾ç½®å¤æ¡æ°æ®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  Array $data</sourceline>
        <sourceline coveredcount="0">     * @param  Integer $expire</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function multiSet(Array $data, $expire = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $this-&gt;beginTimer();</sourceline>
        <sourceline coveredcount="1">        $ret = $this-&gt;obj-&gt;setMulti($data, empty($expire) ? $this-&gt;ini['expire'] : $expire);</sourceline>
        <sourceline coveredcount="1">        $this-&gt;writeLog('MULTI_SET', $data, $this-&gt;getElapsed());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $ret ? true : false;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Boolean delete() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å é¤ç¼å­æ°æ®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function delete($key)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        $this-&gt;beginTimer();</sourceline>
        <sourceline coveredcount="2">        $ret = $this-&gt;obj-&gt;delete($key);</sourceline>
        <sourceline coveredcount="2">        $this-&gt;writeLog('DEL', $key, $this-&gt;getElapsed());</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">        return $ret ? true : false;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture shell() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * Cacheè·åshellæ¥å£</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $callback</sourceline>
        <sourceline coveredcount="0">     * @param  String  $key</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $expire : default null</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function shell($callback, $key, $expire = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $ret = $this-&gt;get($key);</sourceline>
        <sourceline coveredcount="1">        if (is_array($ret)) {</sourceline>
        <sourceline coveredcount="1">            $diff   = array_keys(array_diff_key(</sourceline>
        <sourceline coveredcount="1">                array_flip($key),</sourceline>
        <sourceline coveredcount="1">                array_filter($ret)      /*  &lt;å»ænullå¼ */</sourceline>
        <sourceline coveredcount="1">            ));</sourceline>
        <sourceline coveredcount="1">            if (!empty($diff) &amp;&amp; $app = call_user_func($callback, $diff)) {</sourceline>
        <sourceline coveredcount="1">                $ret = array_merge($ret, (array)$app);</sourceline>
        <sourceline coveredcount="1">                $this-&gt;multiSet($app, $expire);</sourceline>
        <sourceline coveredcount="1">            }</sourceline>
        <sourceline coveredcount="1">        } elseif (empty($ret)) {</sourceline>
        <sourceline coveredcount="1">            $ret = call_user_func($callback, $key);</sourceline>
        <sourceline coveredcount="1">            if (!empty($ret)) {</sourceline>
        <sourceline coveredcount="1">                $this-&gt;set($key, $ret, $expire);</sourceline>
        <sourceline coveredcount="1">            }</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $ret;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture cleanAllCache() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ¸çææç¼å­</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function cleanAllCache()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $ret = array();</sourceline>
        <sourceline coveredcount="3">        foreach ($this-&gt;cas AS $key =&gt; $cas) {</sourceline>
        <sourceline coveredcount="3">            $ret[$key] = $this-&gt;obj-&gt;delete($key);</sourceline>
        <sourceline coveredcount="3">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        return $ret;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private void initMcache() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå§åMcacheå¯¹è±¡</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function initMcache()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        if (!empty($this-&gt;obj)) {</sourceline>
        <sourceline coveredcount="-1">            return;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $this-&gt;obj  = new \Memcached();</sourceline>
        <sourceline coveredcount="3">        $this-&gt;obj-&gt;setOption(\Memcached::OPT_COMPRESSION,   true);</sourceline>
        <sourceline coveredcount="3">        $this-&gt;obj-&gt;setOption(\Memcached::OPT_SERIALIZER,    \Memcached::SERIALIZER_IGBINARY);</sourceline>
        <sourceline coveredcount="3">        $this-&gt;obj-&gt;setOption(\Memcached::OPT_PREFIX_KEY,    $this-&gt;ini['prefix']);</sourceline>
        <sourceline coveredcount="3">        $this-&gt;obj-&gt;setOption(\Memcached::OPT_HASH,          \Memcached::HASH_MD5);</sourceline>
        <sourceline coveredcount="3">        $this-&gt;obj-&gt;setOption(\Memcached::OPT_DISTRIBUTION,  \Memcached::DISTRIBUTION_CONSISTENT);</sourceline>
        <sourceline coveredcount="3">        $this-&gt;obj-&gt;setOption(\Memcached::OPT_BUFFER_WRITES, $this-&gt;bufferWrite);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $this-&gt;obj-&gt;setOption(\Memcached::OPT_CONNECT_TIMEOUT,   $this-&gt;ini['timeout']['connect']);</sourceline>
        <sourceline coveredcount="3">        $this-&gt;obj-&gt;setOption(\Memcached::OPT_SEND_TIMEOUT,      $this-&gt;ini['timeout']['write']);</sourceline>
        <sourceline coveredcount="3">        $this-&gt;obj-&gt;setOption(\Memcached::OPT_POLL_TIMEOUT,      $this-&gt;ini['timeout']['read']);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        /**</sourceline>
        <sourceline coveredcount="0">         * @ä»¥ä¸åæ°è¯·å¿ä¿®æ¹ï¼å¯è½æbug</sourceline>
        <sourceline coveredcount="0">         */</sourceline>
        <sourceline coveredcount="3">        $this-&gt;obj-&gt;setOption(\Memcached::OPT_BINARY_PROTOCOL,   false);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        foreach ($this-&gt;ini['server'] AS $item) {</sourceline>
        <sourceline coveredcount="3">            list($host, $port) = explode(':', $item);</sourceline>
        <sourceline coveredcount="3">            $this-&gt;obj-&gt;addServer($host, $port, 1);</sourceline>
        <sourceline coveredcount="3">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private void beginTimer() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å¼å§è®¡æ¶</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function beginTimer()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        if (!empty($this-&gt;ini['logtime'])) {</sourceline>
        <sourceline coveredcount="3">            $this-&gt;timer    = microtime(true);</sourceline>
        <sourceline coveredcount="3">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private String getElapsed() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åè®¡æ¶æ¶é´</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function getElapsed()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        if (empty($this-&gt;timer)) {</sourceline>
        <sourceline coveredcount="-1">            return null;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $elapse = microtime(true) - $this-&gt;timer;</sourceline>
        <sourceline coveredcount="3">        $this-&gt;timer    = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        return number_format($elapse, 6);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private Boolean writeLog() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå¥æä½æ¥å¿</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  String $log</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @param  Number $time : default null</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function writeLog($log, $key, $time = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        if (empty($this-&gt;log)) {</sourceline>
        <sourceline coveredcount="-1">            return false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        $log = 'MCACHE_' . strtoupper(trim($log));</sourceline>
        <sourceline coveredcount="3">        switch ($err = $this-&gt;obj-&gt;getResultCode()) {</sourceline>
        <sourceline coveredcount="3">        case \Memcached::RES_SUCCESS:</sourceline>
        <sourceline coveredcount="3">            $this-&gt;log-&gt;debug($log . '_OK', array(</sourceline>
        <sourceline coveredcount="3">                'prefix'    =&gt; $this-&gt;ini['prefix'],</sourceline>
        <sourceline coveredcount="3">                'key'       =&gt; $key,</sourceline>
        <sourceline coveredcount="3">                'elapsed'   =&gt; $time,</sourceline>
        <sourceline coveredcount="3">            ));</sourceline>
        <sourceline coveredcount="3">            break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        case \Memcached::RES_NOTFOUND:</sourceline>
        <sourceline coveredcount="3">        case \Memcached::RES_DATA_EXISTS:</sourceline>
        <sourceline coveredcount="3">            $this-&gt;log-&gt;notice($log . '_FAIL', array(</sourceline>
        <sourceline coveredcount="3">                'prefix'    =&gt; $this-&gt;ini['prefix'],</sourceline>
        <sourceline coveredcount="3">                'key'       =&gt; $key,</sourceline>
        <sourceline coveredcount="3">                'code'      =&gt; $err,</sourceline>
        <sourceline coveredcount="3">                'message'   =&gt; $this-&gt;obj-&gt;getResultMessage(),</sourceline>
        <sourceline coveredcount="3">            ));</sourceline>
        <sourceline coveredcount="3">            break;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        default:</sourceline>
        <sourceline coveredcount="1">            $this-&gt;log-&gt;warn($log . '_ERR', array(</sourceline>
        <sourceline coveredcount="1">                'prefix'    =&gt; $this-&gt;ini['prefix'],</sourceline>
        <sourceline coveredcount="1">                'key'       =&gt; $key,</sourceline>
        <sourceline coveredcount="1">                'code'      =&gt; $err,</sourceline>
        <sourceline coveredcount="1">                'message'   =&gt; $this-&gt;obj-&gt;getResultMessage(),</sourceline>
        <sourceline coveredcount="1">            ));</sourceline>
        <sourceline coveredcount="1">            break;</sourceline>
        <sourceline coveredcount="3">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        return true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Cache\Apc" methodcount="10" methodscovered="8" statementcount="69" statementscovered="67" totalcount="79" totalcovered="75">
      <sourcefile name="apc.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/cache/apc.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | APCç¼å­ç±»		        											|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Aleafs.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: aleafs &lt;zhangxc83@sohu.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: apc.php 102 2010-07-02 03:28:27Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib\Cache;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Apc</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæå¸¸é */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    const EXPIRE_TIME	= 1200;		  /**&lt;  seconds    */</sourceline>
        <sourceline coveredcount="0">    const COMPRESS_SIZE	= 4096;		  /**&lt;  bytes      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    const SERIALIZE		= 'serialize';</sourceline>
        <sourceline coveredcount="0">    const UNSERIALIZE	= 'unserialize';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæåé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $data    = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ æååé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $prefix		= '';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $compress	= false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void __construct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String  $prefix</sourceline>
        <sourceline coveredcount="0">     * @param  Boolean $compress (default false)</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __construct($prefix, $compress = false)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="10">        $this-&gt;prefix	= preg_replace('/[\s:]+/', '', $prefix);</sourceline>
        <sourceline coveredcount="10">        $this-&gt;compress	= $compress &amp;&amp; function_exists('gzcompress') ? true : false;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void __destruct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * ææå½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __destruct()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="8">        foreach (self::$data AS $key =&gt; &amp;$val) {</sourceline>
        <sourceline coveredcount="5">            if (empty($val['write'])) {</sourceline>
        <sourceline coveredcount="1">                continue;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="5">            if (apc_store($key, $val['value'], $val['time'])) {</sourceline>
        <sourceline coveredcount="5">                unset($val['write']);</sourceline>
        <sourceline coveredcount="5">            }</sourceline>
        <sourceline coveredcount="8">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Boolean set() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å­å¥æ°æ®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $value</sourceline>
        <sourceline coveredcount="0">     * @param  Integer $expire (default null)</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function set($key, $value, $expire = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="7">        $expire = is_null($expire) ? self::EXPIRE_TIME : (int)$expire;</sourceline>
        <sourceline coveredcount="7">        self::$data[$this-&gt;name($key)] = array(</sourceline>
        <sourceline coveredcount="7">            'write' =&gt; true,</sourceline>
        <sourceline coveredcount="7">            'time'  =&gt; $expire,</sourceline>
        <sourceline coveredcount="7">            'value' =&gt; $this-&gt;pack(array(</sourceline>
        <sourceline coveredcount="7">                'ttl'   =&gt; time() + $expire,</sourceline>
        <sourceline coveredcount="7">                'val'   =&gt; $value,</sourceline>
        <sourceline coveredcount="7">            )),</sourceline>
        <sourceline coveredcount="0">        );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="7">        return true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture get() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * ååºæ°æ®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function get($key, $ttl = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="10">        $key    = $this-&gt;name($key);</sourceline>
        <sourceline coveredcount="10">        if (isset(self::$data[$key])) {</sourceline>
        <sourceline coveredcount="5">            $data = self::$data[$key]['value'];</sourceline>
        <sourceline coveredcount="5">        } else {</sourceline>
        <sourceline coveredcount="10">            $data = apc_fetch($this-&gt;name($key));</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="10">        if (false === $data) {</sourceline>
        <sourceline coveredcount="10">            return null;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">        $ttl  = empty($ttl) ? time() : (int)$ttl;</sourceline>
        <sourceline coveredcount="5">        $data = $this-&gt;unpack($data);</sourceline>
        <sourceline coveredcount="5">        if ($data['ttl'] &lt; $ttl) {</sourceline>
        <sourceline coveredcount="1">            $this-&gt;delete($key);</sourceline>
        <sourceline coveredcount="1">            return null;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="5">        return $data['val'];</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Boolean delete() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å é¤ç¼å­æ°æ®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function delete($key)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $key    = $this-&gt;name($key);</sourceline>
        <sourceline coveredcount="1">        unset(self::$data[$key]);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return apc_delete($key);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static Boolean cleanAllCache() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ¸çææç¼å­</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function cleanAllCache()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="9">        self::$data = array();</sourceline>
        <sourceline coveredcount="9">        return apc_clear_cache('user');</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture shell() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * Cacheè·åshellæ¥å£</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $callback</sourceline>
        <sourceline coveredcount="0">     * @param  String  $key</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $expire : default null</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function shell($callback, $key, $expire = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        $data = $this-&gt;get($key);</sourceline>
        <sourceline coveredcount="4">        if (empty($data)) {</sourceline>
        <sourceline coveredcount="4">            $data = call_user_func($callback, $key);</sourceline>
        <sourceline coveredcount="4">            if (!empty($data)) {</sourceline>
        <sourceline coveredcount="4">                $this-&gt;set($key, $data, $expire);</sourceline>
        <sourceline coveredcount="4">            }</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        return $data;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private String name() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * ä¿®æ­£æ°æ®åç¼</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function name($key)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="10">        return sprintf('%s::%s', $this-&gt;prefix, $key);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private String pack() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æåæ°æ®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $data</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function pack($data)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="7">        if (!$this-&gt;compress) {</sourceline>
        <sourceline coveredcount="6">            return $data;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $func = self::SERIALIZE;</sourceline>
        <sourceline coveredcount="1">        $data = $func($data);</sourceline>
        <sourceline coveredcount="1">        if (strlen($data) &gt;= self::COMPRESS_SIZE) {</sourceline>
        <sourceline coveredcount="-1">            return 'C' . gzcompress($data);</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return 'N' . $data;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private Mixture unpack() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ°æ®è§£å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $data</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function unpack($data)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="5">        if (!$this-&gt;compress) {</sourceline>
        <sourceline coveredcount="4">            return $data;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        if ($data[0] === 'C') {</sourceline>
        <sourceline coveredcount="-1">            $data = gzuncompress(substr($data, 1));</sourceline>
        <sourceline coveredcount="1">        } elseif ($data[0] === 'N') {</sourceline>
        <sourceline coveredcount="1">            $data = substr($data, 1);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="1">        $func = self::UNSERIALIZE;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $func($data);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Cookie" methodcount="4" methodscovered="0" statementcount="0" statementscovered="0" totalcount="4" totalcovered="0">
      <sourcefile name="cookie.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/cookie.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Cookieæä½ç±»														|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Taobao.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: pengchun &lt;pengchun@taobao.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: cookie.php 96 2010-06-02 15:54:01Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Cookie</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæåé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @Cookieæ°æ®</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $data = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @åå§åæ è®°</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $init = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @Cookieå±æ§</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $prop = array(</sourceline>
        <sourceline coveredcount="0">        'domain' =&gt; null,</sourceline>
        <sourceline coveredcount="0">        'path'   =&gt; '/',</sourceline>
        <sourceline coveredcount="0">        'expire' =&gt; 0,</sourceline>
        <sourceline coveredcount="0">        'secure' =&gt; false,</sourceline>
        <sourceline coveredcount="0">    );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void init() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * Cookieåå§å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @paran  Mixture $ini (default null)</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $data (default null)</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function init($ini = null, $data = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        foreach ((array)$ini AS $key =&gt; $val) {</sourceline>
        <sourceline coveredcount="0">            $key = strtolower(trim($key));</sourceline>
        <sourceline coveredcount="0">            if (0 === strpos($key, 'cookie.')) {</sourceline>
        <sourceline coveredcount="0">                $key = substr($key, 7);</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">            if (isset(self::$prop[$key])) {</sourceline>
        <sourceline coveredcount="0">                self::$prop[$key] = $val;</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        self::$data = is_array($data) ? $data : $_COOKIE;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void set() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è®¾ç½®cookieå¼</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $val</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function set($key, $val)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        self::checkInit();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        $key = trim($key);</sourceline>
        <sourceline coveredcount="0">        if (empty($val)) {</sourceline>
        <sourceline coveredcount="0">            unset(self::$data[$key]);</sourceline>
        <sourceline coveredcount="0">        } else {</sourceline>
        <sourceline coveredcount="0">            self::$data[$key] = $val;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        return setcookie(</sourceline>
        <sourceline coveredcount="0">            $key, $val,</sourceline>
        <sourceline coveredcount="0">            self::$prop['expire'] &gt; 0 ? time() + self::$prop['expire'] : 0,</sourceline>
        <sourceline coveredcount="0">            self::$prop['path'],</sourceline>
        <sourceline coveredcount="0">            self::$prop['domain'],</sourceline>
        <sourceline coveredcount="0">            self::$prop['secure'],</sourceline>
        <sourceline coveredcount="0">            false</sourceline>
        <sourceline coveredcount="0">        );</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static Mixture get() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åCookieå¼</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function get($key)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        self::checkInit();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        $key = trim($key);</sourceline>
        <sourceline coveredcount="0">        if (!isset(self::$data[$key])) {</sourceline>
        <sourceline coveredcount="0">            return null;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        return self::$data[$key];</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static void checkInit() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ£æ¥æ¯å¦åå§å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function checkInit()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        if (self::$init) {</sourceline>
        <sourceline coveredcount="0">            return;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        self::init();</sourceline>
        <sourceline coveredcount="0">        self::$init = true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\AutoLoad" methodcount="6" methodscovered="4" statementcount="64" statementscovered="61" totalcount="70" totalcovered="65">
      <sourcefile name="autoload.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/autoload.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | æä»¶èªå¨å è½½æ§å¶    					    							|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copygight (c) 2009 Baidu. Inc. All Rights Reserved						|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: zhangxc &lt;zhangxuancheng@baidu.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: autoload.php 22 2010-04-15 16:28:45Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class AutoLoad</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæåé */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @è·¯å¾è§£æè§å</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $rules	= array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $order   = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $sorted  = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $index   = 0;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void init() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå§å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function init()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="50">        self::register('aleafs\\lib\\cache',    __DIR__ . '/cache/');</sourceline>
        <sourceline coveredcount="50">        self::register('aleafs\\lib\\configer', __DIR__ . '/config/');</sourceline>
        <sourceline coveredcount="50">        self::register('aleafs\\lib\\db',       __DIR__ . '/db/');</sourceline>
        <sourceline coveredcount="50">        self::register('aleafs\\lib\\debug',    __DIR__ . '/debug/');</sourceline>
        <sourceline coveredcount="50">        self::register('aleafs\\lib\\render',   __DIR__ . '/render/');</sourceline>
        <sourceline coveredcount="50">        self::register('aleafs\\lib',           __DIR__);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="50">        spl_autoload_register(array(__CLASS__, 'callback'));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void register() */</sourceline>
        <sourceline coveredcount="0">    /*</sourceline>
        <sourceline coveredcount="0">     * æ³¨åè·¯å¾è§£æè§å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @param  String $dir</sourceline>
        <sourceline coveredcount="0">     * @param  String $pre = null</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function register($key, $dir, $pre = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="50">        $dir = realpath($dir);</sourceline>
        <sourceline coveredcount="50">        if (empty($dir) || !is_dir($dir)) {</sourceline>
        <sourceline coveredcount="-1">            return;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        /**</sourceline>
        <sourceline coveredcount="0">         * æunsetå¨ä½ï¼æä»¥å¾ç¨è¿ä¸ªåéæ¥æ è®°æ¾ç»æè¿å¤å°ä¸ªåç´ </sourceline>
        <sourceline coveredcount="0">         * é¿åregister / unregister å¯¼è´æåºä¸ç¨³å®</sourceline>
        <sourceline coveredcount="0">         */</sourceline>
        <sourceline coveredcount="50">        self::$index++;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="50">        $key = self::normalize($key);</sourceline>
        <sourceline coveredcount="50">        $pre = self::normalize($pre);</sourceline>
        <sourceline coveredcount="50">        $idx = 1000 * self::$index;</sourceline>
        <sourceline coveredcount="50">        if (!empty($pre) &amp;&amp; isset(self::$order[$pre])) {</sourceline>
        <sourceline coveredcount="0">            /**</sourceline>
        <sourceline coveredcount="0">             * AutoLoad::register('root', '...');</sourceline>
        <sourceline coveredcount="0">             * AutoLoad::register('son1', '...', 'root');</sourceline>
        <sourceline coveredcount="0">             * AutoLoad::register('son2', '...', 'root');</sourceline>
        <sourceline coveredcount="0">             */</sourceline>
        <sourceline coveredcount="1">            $idx = self::$order[$pre] - intval(1000 / self::$index + 0.5);  /*&lt; ç¨³å®æåº */</sourceline>
        <sourceline coveredcount="1">            self::$sorted = false;</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="50">        self::$rules[$key] = $dir;</sourceline>
        <sourceline coveredcount="50">        self::$order[$key] = $idx;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void unregister() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ³¨éè·¯å¾è§£æè§å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $name</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function unregister($name)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $name = self::normalize($name);</sourceline>
        <sourceline coveredcount="1">        if (isset(self::$rules[$name])) {</sourceline>
        <sourceline coveredcount="1">            unset(self::$rules[$name]);</sourceline>
        <sourceline coveredcount="1">            unset(self::$order[$name]);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void removeAllRules() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @æ¸çææè§å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function removeAllRules()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="5">        self::$rules    = array();</sourceline>
        <sourceline coveredcount="5">        self::$order    = array();</sourceline>
        <sourceline coveredcount="5">        self::$index    = 0;</sourceline>
        <sourceline coveredcount="5">        self::$sorted   = false;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void callback() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * èªå¨å è½½åè°å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $class</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function callback($class)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="18">        $ordina	= $class;</sourceline>
        <sourceline coveredcount="18">        $class	= preg_replace('/[\/\\\]{1,}/', '/', $class);</sourceline>
        <sourceline coveredcount="18">        $index	= strrpos($class, '/');</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="18">        if (false === $index) {</sourceline>
        <sourceline coveredcount="-1">            require_once(__DIR__ . '/exception.php');</sourceline>
        <sourceline coveredcount="-1">            throw new \Aleafs\Lib\Exception(sprintf('Unregistered namespace when class "%s" defined.', $class));</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="18">        if (!self::$sorted &amp;&amp; array_multisort(self::$order, self::$rules, SORT_ASC, SORT_NUMERIC)) {</sourceline>
        <sourceline coveredcount="6">            self::$sorted = true;</sourceline>
        <sourceline coveredcount="6">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="18">        $path = strtolower(substr($class, 0, $index));</sourceline>
        <sourceline coveredcount="18">        $name = strtolower(substr($class, $index + 1));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="18">        reset(self::$rules);</sourceline>
        <sourceline coveredcount="18">        foreach (self::$rules AS $key =&gt; $dir) {</sourceline>
        <sourceline coveredcount="18">            if (0 !== strpos($path, $key)) {</sourceline>
        <sourceline coveredcount="15">                continue;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="17">            $file = $dir . substr($path, strlen($key)) . '/' . $name . '.php';</sourceline>
        <sourceline coveredcount="17">            if (is_file($file)) {</sourceline>
        <sourceline coveredcount="16">                require $file;</sourceline>
        <sourceline coveredcount="16">            } else {</sourceline>
        <sourceline coveredcount="1">                require_once(__DIR__ . '/exception.php');</sourceline>
        <sourceline coveredcount="1">                throw new \Aleafs\Lib\Exception(sprintf('File "%s" Not Found.', $file));</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="16">            if (!class_exists($ordina)) {</sourceline>
        <sourceline coveredcount="1">                require_once(__DIR__ . '/exception.php');</sourceline>
        <sourceline coveredcount="1">                throw new \Aleafs\Lib\Exception(sprintf('Class "%s" Not Found in "%s".', $ordina, $file));</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="15">            return;</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        require_once(__DIR__ . '/exception.php');</sourceline>
        <sourceline coveredcount="1">        throw new \Aleafs\Lib\Exception(sprintf('Class "%s" Not Found.', $ordina));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String normalize() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è§åå½ä¸åå¤ç</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String $name</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function normalize($name)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="50">        $name = preg_replace('/[\/\\\]+/', '/', preg_replace('/\s+/', '/', $name));</sourceline>
        <sourceline coveredcount="50">        return strtolower(trim($name, '/'));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Configer" methodcount="7" methodscovered="3" statementcount="43" statementscovered="38" totalcount="50" totalcovered="41">
      <sourcefile name="configer.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/configer.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | éç½®æä½ç±»															|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Taobao.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: pengchun &lt;pengchun@taobao.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: configer.php 59 2010-05-05 02:02:04Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Configer</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæåé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @æ³¨åçéç½®ä¿¡æ¯</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $rules = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @å¯¹è±¡æ°ç»</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static $objs  = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ æååé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @è¯»å¥çæ°ç»</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private $option = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @æ¯å¦å·²ç»å è½½</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private $loaded = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @æ°æ®èµæº</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private $url;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static Object instance() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åéç½®åä¾</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @return Object</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function &amp;instance($key)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        $key = strtolower(trim($key));</sourceline>
        <sourceline coveredcount="2">        if (!isset(self::$objs[$key])) {</sourceline>
        <sourceline coveredcount="2">            if (!isset(self::$rules[$key])) {</sourceline>
        <sourceline coveredcount="1">                throw new Exception(sprintf('Undefined config object named as "%s"', $key));</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="2">            self::$objs[$key] = new self(self::$rules[$key]);</sourceline>
        <sourceline coveredcount="2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">        return self::$objs[$key];</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void register() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ³¨åä¸ä¸ªéç½®èµæº</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @param  String $url</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function register($key, $url)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        $key = strtolower(trim($key));</sourceline>
        <sourceline coveredcount="2">        $url = trim($url);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">        if (isset(self::$rules[$key]) &amp;&amp; self::$rules[$key] == $url) {</sourceline>
        <sourceline coveredcount="-1">            return;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">        self::$rules[$key] = $url;</sourceline>
        <sourceline coveredcount="2">        if (isset(self::$objs[$key])) {</sourceline>
        <sourceline coveredcount="1">            unset(self::$objs[$key]);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void unregister() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ³¨éå·²ç»æ³¨åçéç½®èµæº</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function unregister($key)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $key = strtolower(trim($key));</sourceline>
        <sourceline coveredcount="1">        if (isset(self::$rules[$key])) {</sourceline>
        <sourceline coveredcount="1">            unset(self::$rules[$key]);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="1">        if (isset(self::$objs[$key])) {</sourceline>
        <sourceline coveredcount="-1">            unset(self::$objs[$key]);</sourceline>
        <sourceline coveredcount="-1">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture get() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åéç½®åæ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $default (default null)</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function get($key, $default = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        if (!$this-&gt;loaded) {</sourceline>
        <sourceline coveredcount="1">            if (false === ($this-&gt;option = self::loadUrl($this-&gt;url))) {</sourceline>
        <sourceline coveredcount="-1">                return null;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="1">            $this-&gt;loaded = true;</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="1">        $key = strtolower(trim($key));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return isset($this-&gt;option[$key]) ? $this-&gt;option[$key] : $default;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void makeSureRemoveAll() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ¸çæææ³¨åçèµæº</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function makeSureRemoveAll()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        self::$rules = array() &amp;&amp; self::$objs = array();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private void __construct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  String $url</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function __construct($url)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        $this-&gt;url = $url;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static Mixture loadUrl() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è§£æéç½®æä»¶</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String $url</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function loadUrl($url)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        if (empty($url)) {</sourceline>
        <sourceline coveredcount="-1">            return false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $url = parse_url($url);</sourceline>
        <sourceline coveredcount="1">        $cls = empty($url['scheme']) ? array_pop(explode('.', trim($url['path'], "\x00..\x20."))) : $url['scheme'];</sourceline>
        <sourceline coveredcount="1">        $cls = sprintf('%s\%s', __CLASS__, ucfirst(strtolower($cls)));</sourceline>
        <sourceline coveredcount="1">        $obj = new $cls($url);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $obj-&gt;parse();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Render\Html" methodcount="13" methodscovered="5" statementcount="182" statementscovered="142" totalcount="195" totalcovered="147">
      <sourcefile name="html.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/render/html.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Render\Html.php	       											|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Aleafs.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: aleafs &lt;zhangxc83@sohu.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: html.php 2010-04-23  aleafs Exp $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib\Render;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Language;</sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Exception;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Html</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæå¸¸é */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @ç¨äºå¤æ­æ¨¡æ¿æä»¶æ¯å¦ä¸ä¼ å®æ</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    const TPL_COMPLETE_CHAR	= '&lt;!--COMPLETE--&gt;';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    const FILE_MAX_LOCK_TM  = 2;          /**&lt;  æé¿å éæ¶é´      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    const COMPILE_LOOP_DEEP = 5;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæåé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $ini = array(</sourceline>
        <sourceline coveredcount="0">        'tpl_path'  =&gt; null,</sourceline>
        <sourceline coveredcount="0">        'obj_path'  =&gt; null,</sourceline>
        <sourceline coveredcount="0">        'theme'     =&gt; 'default',</sourceline>
        <sourceline coveredcount="0">        'expire'    =&gt; 0,</sourceline>
        <sourceline coveredcount="0">    );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ æååé */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @ç»å®çæ°æ®</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private $data	= array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * @æä»¶ç¼è¯æ¬¡æ°</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public $complie = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void init() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå§åHtmlæ¸²æå¨</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $ini</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function init($ini)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        if (!is_array($ini) || empty($ini)) {</sourceline>
        <sourceline coveredcount="-1">            return;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        self::$ini = array_merge(self::$ini, $ini);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object __construct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __construct()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        return $this-&gt;clean();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object assign() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * ç»å®åæ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $key</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $val</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function assign($key, $val)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $this-&gt;data[trim($key)] = $val;</sourceline>
        <sourceline coveredcount="1">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Object clean() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ¸çææç»å®çåæ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Object $this</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function clean()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $this-&gt;data	= array();</sourceline>
        <sourceline coveredcount="1">        return $this;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture render() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ¸²æå¹¶è¾åº</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $tplFile</sourceline>
        <sourceline coveredcount="0">     * @param  String $tplDir</sourceline>
        <sourceline coveredcount="0">     * @param  Boolean $flush : true</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function render($tplName, $tplDir, $flush = true)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        extract($this-&gt;data);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        ob_start();</sourceline>
        <sourceline coveredcount="1">        include($this-&gt;template($tplName, $tplDir));</sourceline>
        <sourceline coveredcount="1">        $data = ob_get_contents();</sourceline>
        <sourceline coveredcount="1">        ob_end_clean();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        if (false !== $flush) {</sourceline>
        <sourceline coveredcount="-1">            echo $data;</sourceline>
        <sourceline coveredcount="-1">            flush();</sourceline>
        <sourceline coveredcount="-1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $data;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private String template() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åç¼è¯åçæ¨¡æ¿æä»¶å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  String $tplFile</sourceline>
        <sourceline coveredcount="0">     * @param  String $tplDir</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function template($tplName, $tplDir)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $tplObj = sprintf(</sourceline>
        <sourceline coveredcount="1">            '%s/%s/%s/%s.php',</sourceline>
        <sourceline coveredcount="1">            self::$ini['obj_path'],</sourceline>
        <sourceline coveredcount="1">            self::$ini['theme'],</sourceline>
        <sourceline coveredcount="1">            $tplDir, $tplName</sourceline>
        <sourceline coveredcount="1">        );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        if (empty(self::$ini['expire']) &amp;&amp; is_file($tplObj)) {</sourceline>
        <sourceline coveredcount="-1">            return $tplObj;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $themes = array_unique(array(</sourceline>
        <sourceline coveredcount="1">            self::$ini['theme'],</sourceline>
        <sourceline coveredcount="1">            'default',</sourceline>
        <sourceline coveredcount="1">        ));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $error  = true;</sourceline>
        <sourceline coveredcount="1">        foreach ($themes AS $theme) {</sourceline>
        <sourceline coveredcount="1">            $tplSrc = sprintf(</sourceline>
        <sourceline coveredcount="1">                '%s/%s/%s/%s.htm',</sourceline>
        <sourceline coveredcount="1">                self::$ini['tpl_path'],</sourceline>
        <sourceline coveredcount="1">                $theme,</sourceline>
        <sourceline coveredcount="1">                $tplDir, $tplName</sourceline>
        <sourceline coveredcount="1">            );</sourceline>
        <sourceline coveredcount="1">            if (is_file($tplSrc)) {</sourceline>
        <sourceline coveredcount="1">                $error = false;</sourceline>
        <sourceline coveredcount="1">                break;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        if ($error) {</sourceline>
        <sourceline coveredcount="1">            throw new Exception(sprintf(</sourceline>
        <sourceline coveredcount="1">                'No such template source file, path:[%s], theme:[%s], dir:[%s], name:[%s]',</sourceline>
        <sourceline coveredcount="1">                self::$ini['tpl_path'], self::$ini['theme'],</sourceline>
        <sourceline coveredcount="1">                $tplDir, $tplName</sourceline>
        <sourceline coveredcount="1">            ));</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $objTime = is_file($tplObj) ? filemtime($tplObj) : 0;</sourceline>
        <sourceline coveredcount="1">        if ($objTime &lt; filemtime($tplSrc) || $objTime + self::$ini['expire'] &lt; time()) {</sourceline>
        <sourceline coveredcount="1">            $data = array_filter(array_map('trim', (array)file($tplSrc)));</sourceline>
        <sourceline coveredcount="1">            if (0 != strcasecmp(array_pop($data), self::TPL_COMPLETE_CHAR)) {</sourceline>
        <sourceline coveredcount="1">                throw new Exception(sprintf(</sourceline>
        <sourceline coveredcount="1">                    'Template source file "%s" is uncompleted.',</sourceline>
        <sourceline coveredcount="0">                    $tplSrc</sourceline>
        <sourceline coveredcount="1">                ));</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">            $this-&gt;compile(implode("\n", $data), $tplObj);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">            $index  = sprintf('%s/%s', $tplDir, $tplName);</sourceline>
        <sourceline coveredcount="1">            $this-&gt;compile[$index] = isset($this-&gt;compile[$index]) ? $this-&gt;compile[$index] + 1 : 1;</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $tplObj;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String lang() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¯­è¨åè¿è¡ç¿»è¯</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String $string</sourceline>
        <sourceline coveredcount="0">     * @param  String $domain : default null</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function lang($string, $domain = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="-1">        return Language::translate($string, $domain);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static Boolean compile() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * ç¼è¯æ¨¡æ¿æä»¶</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String $content : æ¨¡æ¿åå®¹</sourceline>
        <sourceline coveredcount="0">     * @param  String $tplObj  : æ¨¡æ¿æä»¶</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function compile($content, $tplObj)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $strExp = '((\$[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)(\[[a-zA-Z0-9_\"\'\$\x7f-\xff]+\])*)';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $content = preg_replace("/([\n\r]+)\t+/s", '\\1', $content);</sourceline>
        <sourceline coveredcount="1">        $content = preg_replace('/\&lt;\!\-\-\{(.+?)\}\-\-\&gt;/s', '{\\1}', $content);</sourceline>
        <sourceline coveredcount="1">        $content = preg_replace("/$strExp/es", "self::addquote('&lt;?=\\1?&gt;')", $content);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $content = preg_replace(</sourceline>
        <sourceline coveredcount="1">            '/\s*\{element\s+(.+?)\}\s*/is',</sourceline>
        <sourceline coveredcount="1">            "\n&lt;?php include(\$this-&gt;template('\\1', '_element'));?&gt;\n",</sourceline>
        <sourceline coveredcount="0">            $content</sourceline>
        <sourceline coveredcount="1">        );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $content = preg_replace(</sourceline>
        <sourceline coveredcount="1">            '/\s*\{lang\s+(.+?)\s+(.+?)\}\s*/is',</sourceline>
        <sourceline coveredcount="1">            "\n&lt;?php echo self::lang('\\1', '\\2'); ?&gt;\n",</sourceline>
        <sourceline coveredcount="0">            $content</sourceline>
        <sourceline coveredcount="1">        );</sourceline>
        <sourceline coveredcount="1">        $content = preg_replace(</sourceline>
        <sourceline coveredcount="1">            '/\s*\{lang\s+(.+?)\}\s*/is',</sourceline>
        <sourceline coveredcount="1">            "\n&lt;?php echo self::lang('\\1'); ?&gt;\n",</sourceline>
        <sourceline coveredcount="0">            $content</sourceline>
        <sourceline coveredcount="1">        );</sourceline>
        <sourceline coveredcount="1">        $content = preg_replace(</sourceline>
        <sourceline coveredcount="1">            '/\s*\{elseif\s+(.+?)\}\s*/ies',</sourceline>
        <sourceline coveredcount="1">            "self::stripvtags('\n&lt;?php } elseif (\\1) { ?&gt;\n','')",</sourceline>
        <sourceline coveredcount="0">            $content</sourceline>
        <sourceline coveredcount="1">        );</sourceline>
        <sourceline coveredcount="1">        $content = preg_replace('/\s*\{else\}\s*/is', "\n&lt;? } else { ?&gt;\n", $content);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        for($i = 0; $i &lt; self::COMPILE_LOOP_DEEP; $i++) {</sourceline>
        <sourceline coveredcount="1">            $content = preg_replace(</sourceline>
        <sourceline coveredcount="1">                "/\s*\{loop\s+(\S+)\s+(\S+)\}\s*(.+?)\s*\{\/loop\}\s*/ies",</sourceline>
        <sourceline coveredcount="1">                "self::stripvtags('\n&lt;?php foreach ((array)\\1 AS \\2) { ?&gt;','\n\\3\n&lt;?php } ?&gt;\n')",</sourceline>
        <sourceline coveredcount="0">                $content</sourceline>
        <sourceline coveredcount="1">            );</sourceline>
        <sourceline coveredcount="1">            $content = preg_replace(</sourceline>
        <sourceline coveredcount="1">                "/\s*\{loop\s+(\S+)\s+(\S+)\s+(\S+)\}\s*(.+?)\s*\{\/loop\}\s*/ies",</sourceline>
        <sourceline coveredcount="1">                "self::stripvtags('\n&lt;?php foreach ((array)\\1 AS \\2 =&gt; \\3) { ?&gt;','\n\\4\n&lt;?php } ?&gt;\n')",</sourceline>
        <sourceline coveredcount="0">                $content</sourceline>
        <sourceline coveredcount="1">            );</sourceline>
        <sourceline coveredcount="1">            $content = preg_replace(</sourceline>
        <sourceline coveredcount="1">                "/\s*\{if\s+(.+?)\}\s*(.+?)\s*\{\/if\}\s*/ies",</sourceline>
        <sourceline coveredcount="1">                "self::stripvtags('\n&lt;?php if(\\1) { ?&gt;','\n\\2\n&lt;?php } ?&gt;\n')",</sourceline>
        <sourceline coveredcount="0">                $content</sourceline>
        <sourceline coveredcount="1">            );</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $content = preg_replace('/ \?\&gt;[\n\r]*\&lt;\? /s', ' ', $content);</sourceline>
        <sourceline coveredcount="1">        $content = preg_replace('/\&lt;\?\=(\$.+?)\?\&gt;/s', self::addquote('&lt;?php echo \\1;?&gt;'), $content);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $lock = $tplObj;</sourceline>
        <sourceline coveredcount="1">        if (!self::lock($lock, self::FILE_MAX_LOCK_TM)) {</sourceline>
        <sourceline coveredcount="-1">            throw new Exception(sprintf(</sourceline>
        <sourceline coveredcount="-1">                'Template file "%s" lock error, expire : %ds',</sourceline>
        <sourceline coveredcount="-1">                $tplObj, self::FILE_MAX_LOCK_TM</sourceline>
        <sourceline coveredcount="-1">            ));</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $len1 = strlen($content);</sourceline>
        <sourceline coveredcount="1">        $len2 = file_put_contents($lock, $content, LOCK_EX);</sourceline>
        <sourceline coveredcount="1">        if ($len1 != $len2 || !rename($lock, $tplObj)) {</sourceline>
        <sourceline coveredcount="-1">            self::unlock($lock);</sourceline>
        <sourceline coveredcount="-1">            throw new Exception(sprintf(</sourceline>
        <sourceline coveredcount="-1">                'Template file "%s" flush error, size : %d, write : %d',</sourceline>
        <sourceline coveredcount="-1">                $tplObj, $len1, $len2</sourceline>
        <sourceline coveredcount="-1">            ));</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="1">        self::unlock($lock);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String  realpath() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è®¡ç®æä»¶çå®æ´è·¯å¾å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String $file</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function realpath($file)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        if (!is_scalar($file) || trim($file) == '') {</sourceline>
        <sourceline coveredcount="-1">            return false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        if (false !== ($temp = realpath($file))) {</sourceline>
        <sourceline coveredcount="-1">            return $temp;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $temp = explode(DIRECTORY_SEPARATOR, $file);</sourceline>
        <sourceline coveredcount="1">        $keys = array_keys($temp, '..');</sourceline>
        <sourceline coveredcount="1">        foreach ($keys AS $pos =&gt; $key) {</sourceline>
        <sourceline coveredcount="-1">            array_splice($temp, $key - ($pos * 2 + 1), 2);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return strtr(</sourceline>
        <sourceline coveredcount="1">            implode(DIRECTORY_SEPARATOR, $temp),</sourceline>
        <sourceline coveredcount="1">            array('./' =&gt; '', '.\\' =&gt; '', )</sourceline>
        <sourceline coveredcount="1">        );</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static Boolean lock() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æä»¶éå®</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String  $file : æä»¶å (refferrence)</sourceline>
        <sourceline coveredcount="0">     * @param  Integer $time : éå¤±ææ¶é´ (s)</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function lock(&amp;$file, $time)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        if (false === ($temp = self::realpath($file))) {</sourceline>
        <sourceline coveredcount="-1">            return false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $file = $temp . '.lock';</sourceline>
        <sourceline coveredcount="1">        $path = dirname($file);</sourceline>
        <sourceline coveredcount="1">        if (!is_dir($path) &amp;&amp; !mkdir($path, 0744, true)) {</sourceline>
        <sourceline coveredcount="-1">            return false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $time = max(0, (int)$time);</sourceline>
        <sourceline coveredcount="1">        $time = empty($time) ? 0 : time() - (int)$time;</sourceline>
        <sourceline coveredcount="1">        if (!is_file($file) || ($time &gt; 0 &amp;&amp; (filemtime($file) + $time) &lt;= time())) {</sourceline>
        <sourceline coveredcount="1">            return touch($file) ? true : false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">        $sum  = 0;</sourceline>
        <sourceline coveredcount="-1">        $step = 2000;         /**&lt;  2ms      */</sourceline>
        <sourceline coveredcount="-1">        $need = 1000000 * ($time + filemtime($file) - time());</sourceline>
        <sourceline coveredcount="-1">        $max  = $time * 1000000;</sourceline>
        <sourceline coveredcount="-1">        for ($i = 0;;$i++) {</sourceline>
        <sourceline coveredcount="-1">            $add = $i * $step;</sourceline>
        <sourceline coveredcount="-1">            usleep($add);</sourceline>
        <sourceline coveredcount="-1">            if (!is_file($file)) {</sourceline>
        <sourceline coveredcount="-1">                return true;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">            $sum += $add;</sourceline>
        <sourceline coveredcount="-1">            if ($sum &gt;= $need) {</sourceline>
        <sourceline coveredcount="-1">                self::unlock($file);</sourceline>
        <sourceline coveredcount="-1">                return true;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">            if ($sum &gt;= $max) {</sourceline>
        <sourceline coveredcount="-1">                return false;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="-1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">        return false;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static Boolean unlock() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æä»¶è§£é</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String  $lock : éæä»¶å</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function unlock($lock)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        if (!is_file($lock)) {</sourceline>
        <sourceline coveredcount="1">            return true;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">        if (unlink($lock)) {</sourceline>
        <sourceline coveredcount="-1">            return true;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">        return touch($lock, 0);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String addquote() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ·»å å¼å·</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param String $var</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function addquote($var)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $var = preg_replace('/\[([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)\]/s', "['\\1']", $var);</sourceline>
        <sourceline coveredcount="1">        return str_replace('\\\"', '\"', $var);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String stripvtags() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¿æ»¤PHP tag</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param String $expr</sourceline>
        <sourceline coveredcount="0">     * @param String $statement</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function stripvtags($expr, $statement)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $expr = preg_replace('/\&lt;\?\=(\$.+?)\?\&gt;/s', '\\1', $expr);</sourceline>
        <sourceline coveredcount="1">        $expr = str_replace('\\\"', '\"', $expr);</sourceline>
        <sourceline coveredcount="1">        $statement = str_replace("\\\"", "\"", $statement);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return $expr . $statement;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Parser\Url" methodcount="6" methodscovered="5" statementcount="31" statementscovered="30" totalcount="37" totalcovered="35">
      <sourcefile name="url.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/parser/url.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | URLè§£æç±»			 					    							|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copygight (c) 2003 - 2010 Aleafs.com. All Rights Reserved				|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: aleafs &lt;zhangxc83@sohu.com&gt;									|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib\Parser;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Url</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ æååé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $ordinaryUrl;</sourceline>
        <sourceline coveredcount="0">    private $module;</sourceline>
        <sourceline coveredcount="0">    private $action;</sourceline>
        <sourceline coveredcount="0">    private $param;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void __construct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param String $restUrl</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __construct($restUrl)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        $this-&gt;ordinaryUrl  = trim(ltrim($restUrl, '/'));</sourceline>
        <sourceline coveredcount="2">        $this-&gt;parse();</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture __get() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¯»ååéçé­æ¯æ¹æ³</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __get($key)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        return isset($this-&gt;$key) ? $this-&gt;$key : null;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture param() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åURLä¸­çåæ°å¼</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function param($key, $default = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="-1">        return isset($this-&gt;param[$key]) ? $this-&gt;param[$key] : $default;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static string build() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé URL</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param String $module</sourceline>
        <sourceline coveredcount="0">     * @param String $action</sourceline>
        <sourceline coveredcount="0">     * @param Mixture $param : default null</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function build($module, $action, $param = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        $parts  = array(</sourceline>
        <sourceline coveredcount="1">            self::escape($module),</sourceline>
        <sourceline coveredcount="1">            self::escape($action),</sourceline>
        <sourceline coveredcount="1">        );</sourceline>
        <sourceline coveredcount="1">        foreach ((array)$param AS $key =&gt; $val) {</sourceline>
        <sourceline coveredcount="1">            if (!is_scalar($val)) {</sourceline>
        <sourceline coveredcount="1">                continue;</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="1">            $parts[] = sprintf('%s/%s', self::escape($key), urlencode($val));</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return implode('/', $parts);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private void parse() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * URLè§£æç¨åº</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function parse()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        $urls = explode('?', $this-&gt;ordinaryUrl);</sourceline>
        <sourceline coveredcount="2">        $urls = array_values(array_filter(array_map('trim',</sourceline>
        <sourceline coveredcount="2">            explode('/', reset($urls))</sourceline>
        <sourceline coveredcount="2">        ), 'strlen'));</sourceline>
        <sourceline coveredcount="2">        $this-&gt;module	= isset($urls[0]) ? self::escape($urls[0]) : '';</sourceline>
        <sourceline coveredcount="2">        $this-&gt;action	= isset($urls[1]) ? self::escape($urls[1]) : '';</sourceline>
        <sourceline coveredcount="2">        $this-&gt;param	= array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">        for ($i = 2, $max = count($urls); $i &lt; $max; $i++) {</sourceline>
        <sourceline coveredcount="2">            $name	= self::escape($urls[$i]);</sourceline>
        <sourceline coveredcount="2">            if (!isset($urls[++$i])) {</sourceline>
        <sourceline coveredcount="1">                $this-&gt;param[$name] = true;</sourceline>
        <sourceline coveredcount="1">            } else {</sourceline>
        <sourceline coveredcount="2">                $this-&gt;param[$name] = urldecode($urls[$i]);</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="2">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String escape() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¿æ»¤URLä¸­çéå®å¨å­ç¬¦</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param String $str</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function escape($str)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        return trim(preg_replace('/[^\w]/is', '', $str));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Db\Mysql" methodcount="18" methodscovered="0" statementcount="0" statementscovered="0" totalcount="18" totalcovered="0">
      <sourcefile name="mysql.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/db/mysql.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | MySQLæä½ç±»	    					    							|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2009 Baidu. Inc. All Rights Reserved						|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: zhangxc &lt;zhangxuancheng@baidu.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: sqlite.php 18 2010-04-13 15:40:37Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib\Db;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Configer;</sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Database;</sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Factory;</sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\LiveBox;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Mysql extends Database</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæå¸¸é */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    const CACHE_PREFIX  = '#mysql#';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ æååé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $conf;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $log;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $master;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $slave;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $isMaster   = false;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void __construct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __construct($name)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        $this-&gt;conf = Configer::instance($name);</sourceline>
        <sourceline coveredcount="0">        $this-&gt;log  = Factory::getLog($this-&gt;conf-&gt;get('log.url', ''));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        ini_set('mysql.connect_timeout',    (int)$this-&gt;conf-&gt;get('timeout', 15));</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        $this-&gt;master   = new LiveBox(self::CACHE_PREFIX . '/master', 30);</sourceline>
        <sourceline coveredcount="0">        foreach ((array)$this-&gt;conf-&gt;get('master', array()) AS $url) {</sourceline>
        <sourceline coveredcount="0">            $this-&gt;master-&gt;register($host);</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        $this-&gt;slave    = new LiveBox(self::CACHE_PREFIX . '/slave', 180);</sourceline>
        <sourceline coveredcount="0">        foreach ((array)$this-&gt;conf-&gt;get('slave', array()) AS $url) {</sourceline>
        <sourceline coveredcount="0">            $this-&gt;slave-&gt;register($host);</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture query() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ§è¡QUERY</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access protected</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function query($sql, $try = true)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        if (preg_match('/^(INSERT|DELETE|UPDATE|ALTER|CREATE|DROP|LOAD)/is', trim($sql))) {</sourceline>
        <sourceline coveredcount="0">            $this-&gt;_connectToMaster();</sourceline>
        <sourceline coveredcount="0">        } else {</sourceline>
        <sourceline coveredcount="0">            $this-&gt;_connectToSlave();</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        return $this-&gt;_query(self::sqlClean($sql), $try);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected Boolean _connect() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¿æ¥æ°æ®åº</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access protected</sourceline>
        <sourceline coveredcount="0">     * @return Boolean true or false</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected function _connect()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        if (empty($this-&gt;link)) {</sourceline>
        <sourceline coveredcount="0">            $this-&gt;_connectToSlave();</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        return empty($this-&gt;link) ? false : true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected void _disconnect() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ­å¼è¿æ¥</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access protected</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    protected function _disconnect()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        if (!empty($this-&gt;link)) {</sourceline>
        <sourceline coveredcount="0">            mysql_close($this-&gt;link);</sourceline>
        <sourceline coveredcount="0">            $this-&gt;link	= null;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected Mixture _query() */</sourceline>
        <sourceline coveredcount="0">    protected function _query($sql, $try = true)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        $ret = mysql_query($sql, $this-&gt;link);</sourceline>
        <sourceline coveredcount="0">        if (false === $ret) {</sourceline>
        <sourceline coveredcount="0">            if ($try &amp;&amp; 2006 == mysql_errno($this-&gt;link)) {</sourceline>
        <sourceline coveredcount="0">                $this-&gt;_disconnect();</sourceline>
        <sourceline coveredcount="0">                return $this-&gt;_query($sql, false);</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        return $ret;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected void _begin() */</sourceline>
        <sourceline coveredcount="0">    protected function _begin()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        $this-&gt;_connectToMaster();</sourceline>
        <sourceline coveredcount="0">        return $this-&gt;query('BEGIN');</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected void _commit() */</sourceline>
        <sourceline coveredcount="0">    protected function _commit()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        return $this-&gt;query('COMMIT');</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected void _rollback() */</sourceline>
        <sourceline coveredcount="0">    protected function _rollback()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        return $this-&gt;query('ROLLBACK');</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected void _free() */</sourceline>
        <sourceline coveredcount="0">    protected function _free()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        if (!empty($this-&gt;datares)) {</sourceline>
        <sourceline coveredcount="0">            mysql_free_result($this-&gt;datares);</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0">        $this-&gt;datares  = null;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected void _fetch() */</sourceline>
        <sourceline coveredcount="0">    protected function _fetch($res)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        return mysql_fetch_assoc($res);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected Mixture _error() */</sourceline>
        <sourceline coveredcount="0">    protected function _error()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        if (empty($this-&gt;link)) {</sourceline>
        <sourceline coveredcount="0">            if (empty($this-&gt;msg)) {</sourceline>
        <sourceline coveredcount="0">                return false;</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">            return array('code' =&gt; 1, 'message' =&gt; $this-&gt;msg);</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        $code = mysql_errno($this-&gt;link);</sourceline>
        <sourceline coveredcount="0">        if (empty($code)) {</sourceline>
        <sourceline coveredcount="0">            return false;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        return array(</sourceline>
        <sourceline coveredcount="0">            'code'    =&gt; $code,</sourceline>
        <sourceline coveredcount="0">            'message' =&gt; mysql_error($code),</sourceline>
        <sourceline coveredcount="0">        );</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected integer _lastId() */</sourceline>
        <sourceline coveredcount="0">    protected function _lastId()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        return mysql_insert_id($this-&gt;link);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected integer _numRows() */</sourceline>
        <sourceline coveredcount="0">    protected function _numRows()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        return mysql_num_rows($this-&gt;datares);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ protected integer _affectedRows() */</sourceline>
        <sourceline coveredcount="0">    protected function _affectedRows()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        return mysql_affected_rows($this-&gt;link);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private string _escape() */</sourceline>
        <sourceline coveredcount="0">    private function _escape($string)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        if (empty($this-&gt;link)) {</sourceline>
        <sourceline coveredcount="0">            $this-&gt;_connect();</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        return mysql_real_escape_string($string, $this-&gt;link);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private void _connectToMaster() */</sourceline>
        <sourceline coveredcount="0">    private function _connectToMaster()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        if (!empty($this-&gt;link) &amp;&amp; true === $this-&gt;isMaster) {</sourceline>
        <sourceline coveredcount="0">            return;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        $this-&gt;_disconnect();</sourceline>
        <sourceline coveredcount="0">        $this-&gt;_realConnect($this-&gt;master);</sourceline>
        <sourceline coveredcount="0">        $this-&gt;isMaster = true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private void _connectToSlave() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¿æ¥ä»åº</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function _connectToSlave()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        if (!empty($this-&gt;link)) {</sourceline>
        <sourceline coveredcount="0">            return;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        try {</sourceline>
        <sourceline coveredcount="0">            $this-&gt;_realConnect($this-&gt;slave);</sourceline>
        <sourceline coveredcount="0">        } catch (\Exception $e) {</sourceline>
        <sourceline coveredcount="0">            $this-&gt;_connectToMaster();</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private void _realConnect() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å®éè¿æ¥DB</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function _realConnect(&amp;$box)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="0">        $link   = null;</sourceline>
        <sourceline coveredcount="0">        $func   = $this-&gt;conf-&gt;get('pconnect', false) ? 'mysql_pconnect' : 'mysql_connect';</sourceline>
        <sourceline coveredcount="0">        while (empty($link)) {</sourceline>
        <sourceline coveredcount="0">            $url    = $box-&gt;fetch();</sourceline>
        <sourceline coveredcount="0">            $host   = parse_url($url);</sourceline>
        <sourceline coveredcount="0">            if (empty($host)) {</sourceline>
        <sourceline coveredcount="0">                $this-&gt;log-&gt;warning('MYSQL_CONFIG_ERROR', array('url' =&gt; $url));</sourceline>
        <sourceline coveredcount="0">                $box-&gt;setOffline();</sourceline>
        <sourceline coveredcount="0">                continue;</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">            $error  = error_reporting();</sourceline>
        <sourceline coveredcount="0">            error_reporting(E_ERROR | E_PARSE);</sourceline>
        <sourceline coveredcount="0">            $link   = $func(</sourceline>
        <sourceline coveredcount="0">                sprintf('%s:%d', $host['host'], empty($host['port']) ? 3306 : $host['port']),</sourceline>
        <sourceline coveredcount="0">                rawurldecode($host['user']), rawurldecode($host['pass']), true</sourceline>
        <sourceline coveredcount="0">            );</sourceline>
        <sourceline coveredcount="0">            error_reporting($error);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">            if (empty($link)) {</sourceline>
        <sourceline coveredcount="0">                $box-&gt;setOffline();</sourceline>
        <sourceline coveredcount="0">                $this-&gt;log-&gt;warning('MYSQL_CONNECT_ERROR', array(</sourceline>
        <sourceline coveredcount="0">                    'errno' =&gt; mysql_errno(),</sourceline>
        <sourceline coveredcount="0">                    'error' =&gt; mysql_error(),</sourceline>
        <sourceline coveredcount="0">                ));</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        $encode = $this-&gt;conf-&gt;get('charset', '');</sourceline>
        <sourceline coveredcount="0">        if (!empty($encode)) {</sourceline>
        <sourceline coveredcount="0">            if (function_exists('mysql_set_charset')) {</sourceline>
        <sourceline coveredcount="0">                mysql_set_charset($encode, $link);</sourceline>
        <sourceline coveredcount="0">            } else {</sourceline>
        <sourceline coveredcount="0">                mysql_query('SET NAMES ' . $encode, $link);</sourceline>
        <sourceline coveredcount="0">            }</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        $dbname = $this-&gt;conf-&gt;get('dbname', '');</sourceline>
        <sourceline coveredcount="0">        if (!empty($dbname)) {</sourceline>
        <sourceline coveredcount="0">            mysql_select_db($dbname, $link);</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        $this-&gt;link = $link;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Db\Sqlite" methodcount="15" methodscovered="12" statementcount="51" statementscovered="44" totalcount="66" totalcovered="56">
      <sourcefile name="sqlite.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/db/sqlite.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | SQLITEæä½ç±»	    					    							|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2009 Baidu. Inc. All Rights Reserved						|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: zhangxc &lt;zhangxuancheng@baidu.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +------------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: sqlite.php 18 2010-04-13 15:40:37Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib\Db;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Database;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Sqlite extends Database</sourceline>
        <sourceline coveredcount="1">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $file;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $mode;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $msg;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    public function __construct($file, $mode = 0666)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        $this-&gt;file = $file;</sourceline>
        <sourceline coveredcount="4">        $this-&gt;mode = $mode;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        ini_set('sqlite.assoc_case', 2);    /* LOWER CASE*/</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    public function getAll()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        if (empty($this-&gt;datares)) {</sourceline>
        <sourceline coveredcount="1">            return null;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="2">        return sqlite_fetch_all($this-&gt;datares, SQLITE_ASSOC);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    protected function _connect()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        $err = error_reporting();</sourceline>
        <sourceline coveredcount="4">        error_reporting($err ^ E_WARNING);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        if (!is_file($this-&gt;file)) {</sourceline>
        <sourceline coveredcount="4">            $dir = dirname($this-&gt;file);</sourceline>
        <sourceline coveredcount="4">            if (!is_dir($dir)) {</sourceline>
        <sourceline coveredcount="4">                mkdir($dir, 0744, true);</sourceline>
        <sourceline coveredcount="4">            }</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="4">        $this-&gt;link = sqlite_open($this-&gt;file, $this-&gt;mode, $this-&gt;msg);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        error_reporting($err);</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        if (!$this-&gt;link) {</sourceline>
        <sourceline coveredcount="-1">            $this-&gt;link = null;</sourceline>
        <sourceline coveredcount="-1">            return false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="4">        return true;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    protected function _disconnect()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        if (!empty($this-&gt;link)) {</sourceline>
        <sourceline coveredcount="4">            sqlite_close($this-&gt;link);</sourceline>
        <sourceline coveredcount="4">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    protected function _query($sql)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="4">        return sqlite_query($this-&gt;link, $sql, $this-&gt;msg);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    protected function _begin()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        return $this-&gt;query('BEGIN');</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    protected function _commit()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        return $this-&gt;query('COMMIT');</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    protected function _free()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        $this-&gt;datares  = null;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    protected function _rollback()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        return $this-&gt;query('ROLLBACK');</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    protected function _fetch($res)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        return sqlite_fetch_array($res, SQLITE_ASSOC);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    protected function _error()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        if (empty($this-&gt;link)) {</sourceline>
        <sourceline coveredcount="-1">           if (empty($this-&gt;msg)) {</sourceline>
        <sourceline coveredcount="-1">               return false;</sourceline>
        <sourceline coveredcount="-2">           }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">           return array('code' =&gt; 1, 'message' =&gt; $this-&gt;msg);</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $code = sqlite_last_error($this-&gt;link);</sourceline>
        <sourceline coveredcount="1">        if (!$code) {</sourceline>
        <sourceline coveredcount="-1">            return false;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">        return array(</sourceline>
        <sourceline coveredcount="1">            'code'    =&gt; $code,</sourceline>
        <sourceline coveredcount="1">            'message' =&gt; sqlite_error_string($code),</sourceline>
        <sourceline coveredcount="1">        );</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    protected function _lastId()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        return sqlite_last_insert_rowid($this-&gt;link);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private function _escape($string)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        return sqlite_escape_string($string);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    protected function _numRows()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="-1">        return sqlite_num_rows($this-&gt;datares);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    protected function _affectedRows()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        return sqlite_changes($this-&gt;link);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Factory" methodcount="8" methodscovered="5" statementcount="38" statementscovered="32" totalcount="46" totalcovered="37">
      <sourcefile name="factory.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/factory.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Factory Class 														|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Taobao.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: pengchun &lt;pengchun@taobao.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: log.php 33 2010-04-21 15:41:56Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Log;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Factory</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæåé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $alias   = array();        /**&lt;  å«å      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $reg	= array();        /**&lt;  å±æ§æ±       */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $obj	= array();        /**&lt;  å¯¹è±¡æ±       */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $log = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $ini = array();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void alias() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å¯¹è±¡å«å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function alias($class, $name, $arg = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="-1">        $arg = func_get_args();</sourceline>
        <sourceline coveredcount="-1">        self::$alias[self::objIndex($class, $name)] = array_slice($arg, 2);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void register()</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $class</sourceline>
        <sourceline coveredcount="0">     * @param  String $name</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function register($class, $name, $arg = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        $arg = func_get_args();</sourceline>
        <sourceline coveredcount="2">        self::$reg[self::objIndex($class, $name)] = array_slice($arg, 2);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void unregister() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ³¨éä¸ä¸ªå·²ç»æ³¨åçå¯¹è±¡</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $class</sourceline>
        <sourceline coveredcount="0">     * @param  String $name</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function unregister($class, $name)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $index	= self::objIndex($class, $name);</sourceline>
        <sourceline coveredcount="1">        if (isset(self::$reg[$index])) {</sourceline>
        <sourceline coveredcount="1">            if (isset(self::$obj[$index])) {</sourceline>
        <sourceline coveredcount="-1">                unset(self::$obj[$index]);</sourceline>
        <sourceline coveredcount="-1">            }</sourceline>
        <sourceline coveredcount="1">            unset(self::$reg[$index]);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static void removeAllObject() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æ¸çæææå¯¹è±¡åæ³¨åä¿¡æ¯</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  Boolean $reg (default false)</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function removeAllObject($reg = false)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        self::$obj	= array();</sourceline>
        <sourceline coveredcount="2">        if ($reg) {</sourceline>
        <sourceline coveredcount="2">            self::$reg	= array();</sourceline>
        <sourceline coveredcount="2">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static Object getObject() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åä¸ä¸ªç±»çæå®å®ä¾</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $class</sourceline>
        <sourceline coveredcount="0">     * @param  String $name</sourceline>
        <sourceline coveredcount="0">     * @return Object (refferrence)</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function &amp;getObject($class, $name)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        $index	= self::objIndex($class, $name);</sourceline>
        <sourceline coveredcount="2">        if (empty(self::$obj[$index])) {</sourceline>
        <sourceline coveredcount="2">            if (empty(self::$reg[$index])) {</sourceline>
        <sourceline coveredcount="1">                throw new Exception(sprintf(</sourceline>
        <sourceline coveredcount="1">                    'Unregistered object name as "%s" for class "%s"',</sourceline>
        <sourceline coveredcount="1">                    $name, $class</sourceline>
        <sourceline coveredcount="1">                ));</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="1">            if (!class_exists($class)) {</sourceline>
        <sourceline coveredcount="-1">                AutoLoad::callback($class);</sourceline>
        <sourceline coveredcount="-1">            }</sourceline>
        <sourceline coveredcount="1">            $ref = new \ReflectionClass($class);</sourceline>
        <sourceline coveredcount="1">            self::$obj[$index] = $ref-&gt;newInstanceArgs(self::$reg[$index]);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return self::$obj[$index];</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public static Object getLog() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åæ¥å¿å¯¹è±¡</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public static</sourceline>
        <sourceline coveredcount="0">     * @param  String $url</sourceline>
        <sourceline coveredcount="0">     * @return Object</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public static function &amp;getLog($url)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="3">        if (empty(self::$log[$url])) {</sourceline>
        <sourceline coveredcount="1">            self::$log[$url] = new Log($url);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="3">        return self::$log[$url];</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String objIndex() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé å¯¹è±¡ç´¢å¼</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String $class</sourceline>
        <sourceline coveredcount="0">     * @param  String $name</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function objIndex($class, $name)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        return sprintf('%s\%s', self::normalize($class), self::normalize($name));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static String normalize() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * ç±»åå½ä¸åå¤ç</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String $class</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function normalize($class)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="2">        $class = preg_replace('/\s+/', '', preg_replace('/[\/\\\]+/', '/', $class));</sourceline>
        <sourceline coveredcount="2">        return strtolower(trim($class, '/'));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
    <class name="Aleafs\Lib\Http" methodcount="12" methodscovered="4" statementcount="103" statementscovered="64" totalcount="115" totalcovered="68">
      <sourcefile name="http.php" sourcefile="/home/pengchun/aleafs-lab/lib/class/http.php">
        <sourceline coveredcount="0">&lt;?php</sourceline>
        <sourceline coveredcount="0">/* vim: set expandtab tabstop=4 shiftwidth=4 foldmethod=marker: */</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Lib\Http.php		        										|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Copyright (c) 2010 Aleafs.com. All Rights Reserved					|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">// | Author: aleafs &lt;zhangxc83@sohu.com&gt;								|</sourceline>
        <sourceline coveredcount="0">// +--------------------------------------------------------------------+</sourceline>
        <sourceline coveredcount="0">//</sourceline>
        <sourceline coveredcount="0">// $Id: http.php 85 2010-05-31 13:49:27Z zhangxc83 $</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">namespace Aleafs\Lib;</sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\LiveBox;</sourceline>
        <sourceline coveredcount="0">use \Aleafs\Lib\Exception;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0" startclass="1">class Http</sourceline>
        <sourceline coveredcount="0">{</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæå¸¸é */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    const HTTP_USER_AGENT   = 'Aleafs Http Agent';</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ éæåé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private static $default = array(</sourceline>
        <sourceline coveredcount="0">        'logurl'    =&gt; null,</sourceline>
        <sourceline coveredcount="0">        'logtime'   =&gt; false,</sourceline>
        <sourceline coveredcount="0">        'server'    =&gt; array(),</sourceline>
        <sourceline coveredcount="0">        'prefix'    =&gt; '',</sourceline>
        <sourceline coveredcount="0">        'timeout'   =&gt; array(</sourceline>
        <sourceline coveredcount="0">            'connect'   =&gt; 300,</sourceline>
        <sourceline coveredcount="0">            'write'     =&gt; 100,</sourceline>
        <sourceline coveredcount="0">            'read'      =&gt; 500,</sourceline>
        <sourceline coveredcount="0">        ),</sourceline>
        <sourceline coveredcount="0">        'retry'     =&gt; array(</sourceline>
        <sourceline coveredcount="0">            'timeout1'  =&gt; 10,</sourceline>
        <sourceline coveredcount="0">            'timeout2'  =&gt; 20,</sourceline>
        <sourceline coveredcount="0">        ),</sourceline>
        <sourceline coveredcount="0">    );</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ æååé */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $host   = null;       /**&lt;  æå¡å¨æ±      */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $header = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $ini    = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $curl   = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $log    = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    private $timer  = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void __construct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * æé å½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $ini</sourceline>
        <sourceline coveredcount="0">     * @param  String $key (default null)</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __construct($ini, $key = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $this-&gt;ini  = array_merge(self::$default, (array)$ini);</sourceline>
        <sourceline coveredcount="1">        $this-&gt;host = new LiveBox(__CLASS__ . '/' . !is_scalar($key) ? md5(json_encode($ini)) : $key);</sourceline>
        <sourceline coveredcount="1">        foreach ($this-&gt;ini['server'] AS $host) {</sourceline>
        <sourceline coveredcount="1">            list($host, $weight) = self::parseHost($host);</sourceline>
        <sourceline coveredcount="1">            $this-&gt;host-&gt;register($host, $weight);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        if (!empty($this-&gt;ini['logurl'])) {</sourceline>
        <sourceline coveredcount="-1">            $this-&gt;log  = Factory::getLog($this-&gt;ini['logurl']);</sourceline>
        <sourceline coveredcount="-1">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public void __destruct() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * ææå½æ°</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function __destruct()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        if (!empty($this-&gt;curl)) {</sourceline>
        <sourceline coveredcount="1">            curl_close($this-&gt;curl);</sourceline>
        <sourceline coveredcount="1">            $this-&gt;curl = null;</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public String  getLastUrl() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åæåä¸æ¬¡è¯·æ±ççå®URL</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function getLastUrl()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="-1">        return $this-&gt;lastUrl;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture get() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * GETè¯·æ±</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $url</sourceline>
        <sourceline coveredcount="0">     @param  Mixture $header (default null)</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function get($url, $header = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        return $this-&gt;run('GET', $url, null, $header);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ public Mixture post() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * POSTè¯·æ±</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access public</sourceline>
        <sourceline coveredcount="0">     * @param  String $url</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $data</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $header (default null)</sourceline>
        <sourceline coveredcount="0">     * @return Mixture</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    public function post($url, $data, $header = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="-1">        if (empty($data)) {</sourceline>
        <sourceline coveredcount="0">            $data = array(</sourceline>
        <sourceline coveredcount="-1">                'I\'m not exists' =&gt; 'fixed',</sourceline>
        <sourceline coveredcount="-1">            );</sourceline>
        <sourceline coveredcount="-1">        }</sourceline>
        <sourceline coveredcount="-1">        return $this-&gt;run('POST', $url, $data, $header);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private void   beginTimer() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * å¯å¨è®¡æ¶å¨</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function beginTimer()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        if (!empty($this-&gt;ini['logtime'])) {</sourceline>
        <sourceline coveredcount="-1">            $this-&gt;timer = microtime(true);</sourceline>
        <sourceline coveredcount="-1">        }</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private Float  getElapsed() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è·åè®¡æ¶å¨</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @return Number or Null</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function getElapsed()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="-1">        if (empty($this-&gt;timer)) {</sourceline>
        <sourceline coveredcount="-1">            return null;</sourceline>
        <sourceline coveredcount="-2">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">        $elapse = microtime(true) - $this-&gt;timer;</sourceline>
        <sourceline coveredcount="-1">        $this-&gt;timer = null;</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="-1">        return number_format($elapse, 6);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private void   init() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå§åCURLå¯¹è±¡</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @return void</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function init()</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $this-&gt;curl = curl_init();</sourceline>
        <sourceline coveredcount="0">        $option = array(</sourceline>
        <sourceline coveredcount="1">            CURLOPT_FAILONERROR     =&gt; true,</sourceline>
        <sourceline coveredcount="1">            CURLOPT_FOLLOWLOCATION  =&gt; true,</sourceline>
        <sourceline coveredcount="1">            CURLOPT_MAXREDIRS       =&gt; 3,</sourceline>
        <sourceline coveredcount="1">            CURLOPT_RETURNTRANSFER  =&gt; true,</sourceline>
        <sourceline coveredcount="1">            CURLOPT_HEADER          =&gt; true,</sourceline>
        <sourceline coveredcount="1">            CURLOPT_BUFFERSIZE      =&gt; 8192,</sourceline>
        <sourceline coveredcount="1">            CURLOPT_CONNECTTIMEOUT  =&gt; $this-&gt;ini['timeout']['connect'],</sourceline>
        <sourceline coveredcount="1">            CURLOPT_TIMEOUT         =&gt; (int)(1.2 * (array_sum($this-&gt;ini['timeout']))),</sourceline>
        <sourceline coveredcount="1">            CURLOPT_ENCODING        =&gt; 'gzip,deflate',</sourceline>
        <sourceline coveredcount="1">            CURLOPT_USERAGENT       =&gt; self::HTTP_USER_AGENT,</sourceline>
        <sourceline coveredcount="1">        );</sourceline>
        <sourceline coveredcount="1">        curl_setopt_array($this-&gt;curl, $option);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private String run() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¿è¡HTTPè¯·æ±</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  String $method</sourceline>
        <sourceline coveredcount="0">     * @param  String $url</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $data</sourceline>
        <sourceline coveredcount="0">     * @param  Mixture $header</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function run($method, $url, $data = null, $header = null)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        if (!empty($this-&gt;curl)) {</sourceline>
        <sourceline coveredcount="-1">            curl_close($this-&gt;curl);</sourceline>
        <sourceline coveredcount="-1">        }</sourceline>
        <sourceline coveredcount="1">        $this-&gt;init();</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $method = strtoupper(trim($method));</sourceline>
        <sourceline coveredcount="0">        switch ($method) {</sourceline>
        <sourceline coveredcount="1">        case 'POST':</sourceline>
        <sourceline coveredcount="-1">            curl_setopt($this-&gt;curl, CURLOPT_POST, true);</sourceline>
        <sourceline coveredcount="-1">            break;</sourceline>
        <sourceline coveredcount="1">        default:</sourceline>
        <sourceline coveredcount="1">            break;</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        if (!empty($data)) {</sourceline>
        <sourceline coveredcount="-1">            curl_setopt(</sourceline>
        <sourceline coveredcount="-1">                $this-&gt;curl, CURLOPT_POSTFIELDS,</sourceline>
        <sourceline coveredcount="-1">                is_scalar($data) ? $data : http_build_query($data)</sourceline>
        <sourceline coveredcount="-1">            );</sourceline>
        <sourceline coveredcount="-1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        $retry = $this-&gt;ini['retry'];</sourceline>
        <sourceline coveredcount="1">        array_unshift($retry, 0);</sourceline>
        <sourceline coveredcount="1">        $this-&gt;beginTimer();</sourceline>
        <sourceline coveredcount="1">        foreach ($retry AS $time) {</sourceline>
        <sourceline coveredcount="1">            $this-&gt;lastUrl = $this-&gt;fixUrl($url);</sourceline>
        <sourceline coveredcount="1">            curl_setopt($this-&gt;curl, CURLOPT_URL, $this-&gt;lastUrl);</sourceline>
        <sourceline coveredcount="1">            if (false !== ($ret = curl_exec($this-&gt;curl))) {</sourceline>
        <sourceline coveredcount="-1">                $elapse = $this-&gt;getElapsed();</sourceline>
        <sourceline coveredcount="-1">                if (!empty($this-&gt;log)) {</sourceline>
        <sourceline coveredcount="-1">                    $this-&gt;log-&gt;debug('HTTP_RUN', array(</sourceline>
        <sourceline coveredcount="-1">                        'sleep' =&gt; $time,</sourceline>
        <sourceline coveredcount="-1">                        'time'  =&gt; $elapse,</sourceline>
        <sourceline coveredcount="-1">                        'method'=&gt; $method,</sourceline>
        <sourceline coveredcount="-1">                        'url'   =&gt; $url,</sourceline>
        <sourceline coveredcount="-1">                        'data'  =&gt; $data,</sourceline>
        <sourceline coveredcount="-1">                    ));</sourceline>
        <sourceline coveredcount="-1">                }</sourceline>
        <sourceline coveredcount="-1">                return $this-&gt;split($ret);</sourceline>
        <sourceline coveredcount="-2">            }</sourceline>
        <sourceline coveredcount="1">            usleep($time * 1000);</sourceline>
        <sourceline coveredcount="1">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        throw new Exception(sprintf(</sourceline>
        <sourceline coveredcount="1">            'Http Error : [%s] %s',</sourceline>
        <sourceline coveredcount="1">            curl_errno($this-&gt;curl),</sourceline>
        <sourceline coveredcount="1">            curl_error($this-&gt;curl)</sourceline>
        <sourceline coveredcount="1">        ));</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private String fixUrl() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è¡¥å¨å®æ´çURL</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  String $url</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function fixUrl($url)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        return sprintf(</sourceline>
        <sourceline coveredcount="1">            'http://%s/%s/%s',</sourceline>
        <sourceline coveredcount="1">            $this-&gt;host-&gt;fetch(),</sourceline>
        <sourceline coveredcount="1">            trim($this-&gt;ini['prefix'], '/'),</sourceline>
        <sourceline coveredcount="1">            ltrim($url, '/')</sourceline>
        <sourceline coveredcount="1">        );</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private String split() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * åå²HTTPè¿åçå­ç¬¦ä¸²</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private</sourceline>
        <sourceline coveredcount="0">     * @param  String $ret</sourceline>
        <sourceline coveredcount="0">     * @return String</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private function split($ret)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="-1">        list($this-&gt;header, $body) = explode("\r\n\r\n", trim($ret));</sourceline>
        <sourceline coveredcount="-1">        return $body;</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">    /* {{{ private static Array parseHost() */</sourceline>
        <sourceline coveredcount="0">    /**</sourceline>
        <sourceline coveredcount="0">     * è§£ææå¡å¨å°å</sourceline>
        <sourceline coveredcount="0">     *</sourceline>
        <sourceline coveredcount="0">     * @access private static</sourceline>
        <sourceline coveredcount="0">     * @param  String $host</sourceline>
        <sourceline coveredcount="0">     * @return Array</sourceline>
        <sourceline coveredcount="0">     */</sourceline>
        <sourceline coveredcount="0">    private static function parseHost($host)</sourceline>
        <sourceline coveredcount="0">    {</sourceline>
        <sourceline coveredcount="1">        $var = explode('?', $host);</sourceline>
        <sourceline coveredcount="1">        if (!isset($var[1])) {</sourceline>
        <sourceline coveredcount="-1">            $weight = 1;</sourceline>
        <sourceline coveredcount="-1">        } else {</sourceline>
        <sourceline coveredcount="1">            parse_str($var[1], $query);</sourceline>
        <sourceline coveredcount="1">            $query  = array_change_key_case($query, CASE_LOWER);</sourceline>
        <sourceline coveredcount="1">            $weight = isset($query['weight']) ? max(1, (int)$query['weight']) : 1;</sourceline>
        <sourceline coveredcount="0">        }</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="1">        return array(reset($var), $weight);</sourceline>
        <sourceline coveredcount="0">    }</sourceline>
        <sourceline coveredcount="0">    /* }}} */</sourceline>
        <sourceline coveredcount="0"></sourceline>
        <sourceline coveredcount="0">}</sourceline>
        <sourceline coveredcount="0"></sourceline>
      </sourcefile>
    </class>
  </package>
</snapshot>
